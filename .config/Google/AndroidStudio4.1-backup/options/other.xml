<application>
  <component name="PropertiesComponent">
    <property name="ATTACHED_TOOL_WINDOW.DEFAULT.DESIGN_FILES_PREVIEW_EDITOR.TOOL_ORDER" value="" />
    <property name="ATTACHED_TOOL_WINDOW.DEFAULT.Layout Inspector.PROPERTIES.AUTO_HIDE" value="false" />
    <property name="ATTACHED_TOOL_WINDOW.DEFAULT.Layout Inspector.PROPERTIES.LEFT" value="false" />
    <property name="ATTACHED_TOOL_WINDOW.DEFAULT.Layout Inspector.PROPERTIES.MINIMIZED" value="false" />
    <property name="ATTACHED_TOOL_WINDOW.DEFAULT.Layout Inspector.PROPERTIES.SPLIT" value="false" />
    <property name="ATTACHED_TOOL_WINDOW.DEFAULT.Layout Inspector.TOOL_ORDER" value="TREE,PROPERTIES" />
    <property name="ATTACHED_TOOL_WINDOW.DEFAULT.Layout Inspector.TREE.AUTO_HIDE" value="false" />
    <property name="ATTACHED_TOOL_WINDOW.DEFAULT.Layout Inspector.TREE.LEFT" value="true" />
    <property name="ATTACHED_TOOL_WINDOW.DEFAULT.Layout Inspector.TREE.MINIMIZED" value="false" />
    <property name="ATTACHED_TOOL_WINDOW.DEFAULT.Layout Inspector.TREE.SPLIT" value="false" />
    <property name="ATTACHED_TOOL_WINDOW.DEFAULT.NAV_EDITOR.PROPERTIES.DEACTIVATED.AUTO_HIDE" value="false" />
    <property name="ATTACHED_TOOL_WINDOW.DEFAULT.NAV_EDITOR.PROPERTIES.DEACTIVATED.LEFT" value="false" />
    <property name="ATTACHED_TOOL_WINDOW.DEFAULT.NAV_EDITOR.PROPERTIES.DEACTIVATED.MINIMIZED" value="false" />
    <property name="ATTACHED_TOOL_WINDOW.DEFAULT.NAV_EDITOR.PROPERTIES.DEACTIVATED.SPLIT" value="false" />
    <property name="ATTACHED_TOOL_WINDOW.DEFAULT.NAV_EDITOR.PROPERTIES.FULL.AUTO_HIDE" value="false" />
    <property name="ATTACHED_TOOL_WINDOW.DEFAULT.NAV_EDITOR.PROPERTIES.FULL.LEFT" value="false" />
    <property name="ATTACHED_TOOL_WINDOW.DEFAULT.NAV_EDITOR.PROPERTIES.FULL.MINIMIZED" value="false" />
    <property name="ATTACHED_TOOL_WINDOW.DEFAULT.NAV_EDITOR.PROPERTIES.FULL.SPLIT" value="false" />
    <property name="ATTACHED_TOOL_WINDOW.DEFAULT.NAV_EDITOR.PROPERTIES.SPLIT.AUTO_HIDE" value="false" />
    <property name="ATTACHED_TOOL_WINDOW.DEFAULT.NAV_EDITOR.PROPERTIES.SPLIT.LEFT" value="false" />
    <property name="ATTACHED_TOOL_WINDOW.DEFAULT.NAV_EDITOR.PROPERTIES.SPLIT.MINIMIZED" value="true" />
    <property name="ATTACHED_TOOL_WINDOW.DEFAULT.NAV_EDITOR.PROPERTIES.SPLIT.SPLIT" value="false" />
    <property name="ATTACHED_TOOL_WINDOW.DEFAULT.NAV_EDITOR.TOOL_ORDER" value="PROPERTIES,structure" />
    <property name="ATTACHED_TOOL_WINDOW.DEFAULT.NAV_EDITOR.structure.DEACTIVATED.AUTO_HIDE" value="false" />
    <property name="ATTACHED_TOOL_WINDOW.DEFAULT.NAV_EDITOR.structure.DEACTIVATED.LEFT" value="true" />
    <property name="ATTACHED_TOOL_WINDOW.DEFAULT.NAV_EDITOR.structure.DEACTIVATED.MINIMIZED" value="false" />
    <property name="ATTACHED_TOOL_WINDOW.DEFAULT.NAV_EDITOR.structure.DEACTIVATED.SPLIT" value="false" />
    <property name="ATTACHED_TOOL_WINDOW.DEFAULT.NAV_EDITOR.structure.FULL.AUTO_HIDE" value="false" />
    <property name="ATTACHED_TOOL_WINDOW.DEFAULT.NAV_EDITOR.structure.FULL.LEFT" value="true" />
    <property name="ATTACHED_TOOL_WINDOW.DEFAULT.NAV_EDITOR.structure.FULL.MINIMIZED" value="false" />
    <property name="ATTACHED_TOOL_WINDOW.DEFAULT.NAV_EDITOR.structure.FULL.SPLIT" value="false" />
    <property name="ATTACHED_TOOL_WINDOW.DEFAULT.NAV_EDITOR.structure.SPLIT.AUTO_HIDE" value="false" />
    <property name="ATTACHED_TOOL_WINDOW.DEFAULT.NAV_EDITOR.structure.SPLIT.LEFT" value="true" />
    <property name="ATTACHED_TOOL_WINDOW.DEFAULT.NAV_EDITOR.structure.SPLIT.MINIMIZED" value="true" />
    <property name="ATTACHED_TOOL_WINDOW.DEFAULT.NAV_EDITOR.structure.SPLIT.SPLIT" value="false" />
    <property name="ATTACHED_TOOL_WINDOW.DEFAULT.NELE_EDITOR.COMPONENT_TREE.DEACTIVATED.AUTO_HIDE" value="false" />
    <property name="ATTACHED_TOOL_WINDOW.DEFAULT.NELE_EDITOR.COMPONENT_TREE.DEACTIVATED.LEFT" value="true" />
    <property name="ATTACHED_TOOL_WINDOW.DEFAULT.NELE_EDITOR.COMPONENT_TREE.DEACTIVATED.MINIMIZED" value="false" />
    <property name="ATTACHED_TOOL_WINDOW.DEFAULT.NELE_EDITOR.COMPONENT_TREE.DEACTIVATED.SPLIT" value="true" />
    <property name="ATTACHED_TOOL_WINDOW.DEFAULT.NELE_EDITOR.COMPONENT_TREE.FULL.AUTO_HIDE" value="false" />
    <property name="ATTACHED_TOOL_WINDOW.DEFAULT.NELE_EDITOR.COMPONENT_TREE.FULL.LEFT" value="true" />
    <property name="ATTACHED_TOOL_WINDOW.DEFAULT.NELE_EDITOR.COMPONENT_TREE.FULL.MINIMIZED" value="false" />
    <property name="ATTACHED_TOOL_WINDOW.DEFAULT.NELE_EDITOR.COMPONENT_TREE.FULL.SPLIT" value="true" />
    <property name="ATTACHED_TOOL_WINDOW.DEFAULT.NELE_EDITOR.COMPONENT_TREE.SPLIT.AUTO_HIDE" value="false" />
    <property name="ATTACHED_TOOL_WINDOW.DEFAULT.NELE_EDITOR.COMPONENT_TREE.SPLIT.LEFT" value="true" />
    <property name="ATTACHED_TOOL_WINDOW.DEFAULT.NELE_EDITOR.COMPONENT_TREE.SPLIT.MINIMIZED" value="true" />
    <property name="ATTACHED_TOOL_WINDOW.DEFAULT.NELE_EDITOR.COMPONENT_TREE.SPLIT.SPLIT" value="true" />
    <property name="ATTACHED_TOOL_WINDOW.DEFAULT.NELE_EDITOR.PALETTE.DEACTIVATED.AUTO_HIDE" value="false" />
    <property name="ATTACHED_TOOL_WINDOW.DEFAULT.NELE_EDITOR.PALETTE.DEACTIVATED.LEFT" value="true" />
    <property name="ATTACHED_TOOL_WINDOW.DEFAULT.NELE_EDITOR.PALETTE.DEACTIVATED.MINIMIZED" value="false" />
    <property name="ATTACHED_TOOL_WINDOW.DEFAULT.NELE_EDITOR.PALETTE.DEACTIVATED.SPLIT" value="false" />
    <property name="ATTACHED_TOOL_WINDOW.DEFAULT.NELE_EDITOR.PALETTE.FULL.AUTO_HIDE" value="false" />
    <property name="ATTACHED_TOOL_WINDOW.DEFAULT.NELE_EDITOR.PALETTE.FULL.LEFT" value="true" />
    <property name="ATTACHED_TOOL_WINDOW.DEFAULT.NELE_EDITOR.PALETTE.FULL.MINIMIZED" value="false" />
    <property name="ATTACHED_TOOL_WINDOW.DEFAULT.NELE_EDITOR.PALETTE.FULL.SPLIT" value="false" />
    <property name="ATTACHED_TOOL_WINDOW.DEFAULT.NELE_EDITOR.PALETTE.SPLIT.AUTO_HIDE" value="false" />
    <property name="ATTACHED_TOOL_WINDOW.DEFAULT.NELE_EDITOR.PALETTE.SPLIT.LEFT" value="true" />
    <property name="ATTACHED_TOOL_WINDOW.DEFAULT.NELE_EDITOR.PALETTE.SPLIT.MINIMIZED" value="true" />
    <property name="ATTACHED_TOOL_WINDOW.DEFAULT.NELE_EDITOR.PALETTE.SPLIT.SPLIT" value="false" />
    <property name="ATTACHED_TOOL_WINDOW.DEFAULT.NELE_EDITOR.PROPERTIES.DEACTIVATED.AUTO_HIDE" value="false" />
    <property name="ATTACHED_TOOL_WINDOW.DEFAULT.NELE_EDITOR.PROPERTIES.DEACTIVATED.LEFT" value="false" />
    <property name="ATTACHED_TOOL_WINDOW.DEFAULT.NELE_EDITOR.PROPERTIES.DEACTIVATED.MINIMIZED" value="false" />
    <property name="ATTACHED_TOOL_WINDOW.DEFAULT.NELE_EDITOR.PROPERTIES.DEACTIVATED.SPLIT" value="false" />
    <property name="ATTACHED_TOOL_WINDOW.DEFAULT.NELE_EDITOR.PROPERTIES.FULL.AUTO_HIDE" value="false" />
    <property name="ATTACHED_TOOL_WINDOW.DEFAULT.NELE_EDITOR.PROPERTIES.FULL.LEFT" value="false" />
    <property name="ATTACHED_TOOL_WINDOW.DEFAULT.NELE_EDITOR.PROPERTIES.FULL.MINIMIZED" value="false" />
    <property name="ATTACHED_TOOL_WINDOW.DEFAULT.NELE_EDITOR.PROPERTIES.FULL.SPLIT" value="false" />
    <property name="ATTACHED_TOOL_WINDOW.DEFAULT.NELE_EDITOR.PROPERTIES.SPLIT.AUTO_HIDE" value="false" />
    <property name="ATTACHED_TOOL_WINDOW.DEFAULT.NELE_EDITOR.PROPERTIES.SPLIT.LEFT" value="false" />
    <property name="ATTACHED_TOOL_WINDOW.DEFAULT.NELE_EDITOR.PROPERTIES.SPLIT.MINIMIZED" value="true" />
    <property name="ATTACHED_TOOL_WINDOW.DEFAULT.NELE_EDITOR.PROPERTIES.SPLIT.SPLIT" value="false" />
    <property name="ATTACHED_TOOL_WINDOW.DEFAULT.NELE_EDITOR.TOOL_ORDER" value="PALETTE,PROPERTIES,COMPONENT_TREE" />
    <property name="ATTACHED_TOOL_WINDOW.DESIGN_FILES_PREVIEW_EDITOR.TOOL_ORDER" value="" />
    <property name="ATTACHED_TOOL_WINDOW.Layout Inspector.TOOL_ORDER" value="TREE,PROPERTIES" />
    <property name="ATTACHED_TOOL_WINDOW.Layout Inspector.TREE.LEFT" value="true" />
    <property name="ATTACHED_TOOL_WINDOW.NAV_EDITOR.PROPERTIES.SPLIT.MINIMIZED" value="true" />
    <property name="ATTACHED_TOOL_WINDOW.NAV_EDITOR.TOOL_ORDER" value="PROPERTIES,structure" />
    <property name="ATTACHED_TOOL_WINDOW.NAV_EDITOR.structure.DEACTIVATED.LEFT" value="true" />
    <property name="ATTACHED_TOOL_WINDOW.NAV_EDITOR.structure.FULL.LEFT" value="true" />
    <property name="ATTACHED_TOOL_WINDOW.NAV_EDITOR.structure.SPLIT.LEFT" value="true" />
    <property name="ATTACHED_TOOL_WINDOW.NAV_EDITOR.structure.SPLIT.MINIMIZED" value="true" />
    <property name="ATTACHED_TOOL_WINDOW.NELE_EDITOR.COMPONENT_TREE.DEACTIVATED.LEFT" value="true" />
    <property name="ATTACHED_TOOL_WINDOW.NELE_EDITOR.COMPONENT_TREE.DEACTIVATED.SPLIT" value="true" />
    <property name="ATTACHED_TOOL_WINDOW.NELE_EDITOR.COMPONENT_TREE.FULL.LEFT" value="true" />
    <property name="ATTACHED_TOOL_WINDOW.NELE_EDITOR.COMPONENT_TREE.FULL.SPLIT" value="true" />
    <property name="ATTACHED_TOOL_WINDOW.NELE_EDITOR.COMPONENT_TREE.SPLIT.LEFT" value="true" />
    <property name="ATTACHED_TOOL_WINDOW.NELE_EDITOR.COMPONENT_TREE.SPLIT.MINIMIZED" value="true" />
    <property name="ATTACHED_TOOL_WINDOW.NELE_EDITOR.COMPONENT_TREE.SPLIT.SPLIT" value="true" />
    <property name="ATTACHED_TOOL_WINDOW.NELE_EDITOR.PALETTE.DEACTIVATED.LEFT" value="true" />
    <property name="ATTACHED_TOOL_WINDOW.NELE_EDITOR.PALETTE.FULL.LEFT" value="true" />
    <property name="ATTACHED_TOOL_WINDOW.NELE_EDITOR.PALETTE.SPLIT.LEFT" value="true" />
    <property name="ATTACHED_TOOL_WINDOW.NELE_EDITOR.PALETTE.SPLIT.MINIMIZED" value="true" />
    <property name="ATTACHED_TOOL_WINDOW.NELE_EDITOR.PROPERTIES.SPLIT.MINIMIZED" value="true" />
    <property name="ATTACHED_TOOL_WINDOW.NELE_EDITOR.TOOL_ORDER" value="PALETTE,PROPERTIES,COMPONENT_TREE" />
    <property name="AndroidInitConfigurator.V1" value="true" />
    <property name="AndroidInitConfigurator.V3" value="true" />
    <property name="AndroidInitConfigurator.V5" value="true" />
    <property name="CommitChangeListDialog.DETAILS_SPLITTER_PROPORTION_2" value="0.64496124" />
    <property name="Copy.OpenInEditor" value="true" />
    <property name="Default.SavedEditorTheme" value="_@user_Default" />
    <property name="ExpandBeforeRunStepsPanel" value="true" />
    <property name="ExpandRunDashboardTypesPanel" value="false" />
    <property name="FileTemplates.SelectedTemplate" value="HTML File" />
    <property name="InstalledPluginsSearchHistory" value="vm&#10;dart" />
    <property name="KEYMAP" value="close&#10;close tab&#10;tab" />
    <property name="LOG_FILTER_HISTORY" value="Buy&#10;Account&#10;Home&#10;Fireba&#10;HomeFragment" />
    <property name="MarketplacePluginsSearchHistory" value="dart&#10;dar&#10;flutterdar&#10;flutterda&#10;flutter" />
    <property name="MemberChooser.copyJavadoc" value="false" />
    <property name="MemberChooser.showClasses" value="true" />
    <property name="MobileminApi" value="19" />
    <property name="PROJECT_STRUCTURE_NOTIFICATION_LAST_HIDDEN_TIMESTAMP" value="1604408574188" />
    <property name="PluginConfigurable.selectionTab" value="1" />
    <property name="SAVED_ANDROID_NPW_ASKED_LANGUAGE" value="true" />
    <property name="SAVED_ANDROID_NPW_LANGUAGE" value="Java" />
    <property name="SAVED_ANDROID_PACKAGE" value="com.example" />
    <property name="SPLIT_EDITOR_MODE_/home/mepowerleo10/AndroidStudioProjects/Gloria/app/src/main/res/layout/activity_main.xml" value="FULL" />
    <property name="SPLIT_EDITOR_MODE_/home/mepowerleo10/AndroidStudioProjects/SikiaAudioBooks/app/src/main/res/drawable/ic_icon.xml" value="SPLIT" />
    <property name="SPLIT_EDITOR_MODE_/home/mepowerleo10/AndroidStudioProjects/SikiaAudioBooks/app/src/main/res/drawable/rounded_corners.xml" value="SPLIT" />
    <property name="SPLIT_EDITOR_MODE_/home/mepowerleo10/AndroidStudioProjects/SikiaAudioBooks/app/src/main/res/drawable/rounded_top_borders.xml" value="DEACTIVATED" />
    <property name="SPLIT_EDITOR_MODE_/home/mepowerleo10/AndroidStudioProjects/SikiaAudioBooks/app/src/main/res/layout/activity_home.xml" value="SPLIT" />
    <property name="SPLIT_EDITOR_MODE_/home/mepowerleo10/AndroidStudioProjects/SikiaAudioBooks/app/src/main/res/layout/activity_language_select.xml" value="SPLIT" />
    <property name="SPLIT_EDITOR_MODE_/home/mepowerleo10/AndroidStudioProjects/SikiaAudioBooks/app/src/main/res/layout/activity_login.xml" value="SPLIT" />
    <property name="SPLIT_EDITOR_MODE_/home/mepowerleo10/AndroidStudioProjects/SikiaAudioBooks/app/src/main/res/layout/activity_main.xml" value="SPLIT" />
    <property name="SPLIT_EDITOR_MODE_/home/mepowerleo10/AndroidStudioProjects/SikiaAudioBooks/app/src/main/res/layout/activity_player.xml" value="SPLIT" />
    <property name="SPLIT_EDITOR_MODE_/home/mepowerleo10/AndroidStudioProjects/SikiaAudioBooks/app/src/main/res/layout/activity_registration.xml" value="SPLIT" />
    <property name="SPLIT_EDITOR_MODE_/home/mepowerleo10/AndroidStudioProjects/SikiaAudioBooks/app/src/main/res/layout/activity_splash_screen.xml" value="SPLIT" />
    <property name="SPLIT_EDITOR_MODE_/home/mepowerleo10/AndroidStudioProjects/SikiaAudioBooks/app/src/main/res/layout/book_details_fragment.xml" value="SPLIT" />
    <property name="SPLIT_EDITOR_MODE_/home/mepowerleo10/AndroidStudioProjects/SikiaAudioBooks/app/src/main/res/layout/collection_book_item.xml" value="SPLIT" />
    <property name="SPLIT_EDITOR_MODE_/home/mepowerleo10/AndroidStudioProjects/SikiaAudioBooks/app/src/main/res/layout/dialog_verify_number.xml" value="SPLIT" />
    <property name="SPLIT_EDITOR_MODE_/home/mepowerleo10/AndroidStudioProjects/SikiaAudioBooks/app/src/main/res/layout/fragment_account.xml" value="SPLIT" />
    <property name="SPLIT_EDITOR_MODE_/home/mepowerleo10/AndroidStudioProjects/SikiaAudioBooks/app/src/main/res/layout/fragment_collection.xml" value="SPLIT" />
    <property name="SPLIT_EDITOR_MODE_/home/mepowerleo10/AndroidStudioProjects/SikiaAudioBooks/app/src/main/res/layout/fragment_collection_tab.xml" value="SPLIT" />
    <property name="SPLIT_EDITOR_MODE_/home/mepowerleo10/AndroidStudioProjects/SikiaAudioBooks/app/src/main/res/layout/fragment_home.xml" value="SPLIT" />
    <property name="SPLIT_EDITOR_MODE_/home/mepowerleo10/AndroidStudioProjects/SikiaAudioBooks/app/src/main/res/layout/fragment_player.xml" value="SPLIT" />
    <property name="SPLIT_EDITOR_MODE_/home/mepowerleo10/AndroidStudioProjects/SikiaAudioBooks/app/src/main/res/layout/fragment_popular_tab.xml" value="SPLIT" />
    <property name="SPLIT_EDITOR_MODE_/home/mepowerleo10/AndroidStudioProjects/SikiaAudioBooks/app/src/main/res/layout/lang_spiner_item.xml" value="SPLIT" />
    <property name="SPLIT_EDITOR_MODE_/home/mepowerleo10/AndroidStudioProjects/SikiaAudioBooks/app/src/main/res/layout/layout_book_list_item.xml" value="SPLIT" />
    <property name="SPLIT_EDITOR_MODE_/home/mepowerleo10/AndroidStudioProjects/SikiaAudioBooks/app/src/main/res/layout/rounded_button_settings.xml" value="DEACTIVATED" />
    <property name="SPLIT_EDITOR_MODE_/home/mepowerleo10/AndroidStudioProjects/SikiaAudioBooks/app/src/main/res/layout/thank_you_popup.xml" value="SPLIT" />
    <property name="SPLIT_EDITOR_MODE_/home/mepowerleo10/AndroidStudioProjects/SikiaAudioBooks/app/src/main/res/menu/bottom_nav_menu.xml" value="DEACTIVATED" />
    <property name="SPLIT_EDITOR_MODE_/home/mepowerleo10/AndroidStudioProjects/SikiaAudioBooks/app/src/main/res/navigation/mobile_navigation.xml" value="FULL" />
    <property name="SPLIT_EDITOR_MODE_/home/mepowerleo10/AndroidStudioProjects/SikiaAudioBooks/app/src/main/res/xml/searchable.xml" value="SPLIT" />
    <property name="SPLIT_EDITOR_MODE_/home/mepowerleo10/AndroidStudioProjects/TestApp/app/src/main/res/layout/activity_main.xml" value="DEACTIVATED" />
    <property name="SettingsSearchHistory" value="maven&#10;grad&#10;http&#10;emulator&#10;memo" />
    <property name="TextEditorWithPreview.SplitterProportionKey" value="0.589618" />
    <property name="android-component-compatibility-check" value="1590016511450" />
    <property name="ask.about.ctrl.y.shortcut" value="true" />
    <property name="build.toolwindow.Build Output.selection.state" value="com.intellij.build.BuildTreeConsoleView" />
    <property name="build.toolwindow.Sync.selection.state" value="com.intellij.build.BuildTreeConsoleView" />
    <property name="com.google.services.firebase.firebase_servicesBundle" value="&lt;?xml version=&quot;1.0&quot;?&gt;&#10;&lt;!DOCTYPE root [&#10;  &lt;!-- Common Firebase dependencies --&gt;&#10;  &lt;!ENTITY google-services-plugin-class &quot;com.google.gms:google-services:4.3.3&quot;&gt;&#10;  &lt;!ENTITY google-services-plugin &quot;com.google.gms.google-services&quot;&gt;&#10;  &lt;!ENTITY gradle-plugin-class &quot;com.android.tools.build:gradle:3.4.0&quot;&gt;&#10;&#10;  &lt;!-- Firebase SDK libraries --&gt;&#10;  &lt;!-- Analytics--&gt;&#10;  &lt;!ENTITY analytics-dependency &quot;com.google.firebase:firebase-analytics:17.6.0&quot;&gt;&#10;  &lt;!-- Crashlytics--&gt;&#10;  &lt;!ENTITY crashlytics-dependency &quot;com.google.firebase:firebase-crashlytics:17.2.2&quot;&gt;&#10;  &lt;!-- Performance Monitoring--&gt;&#10;  &lt;!ENTITY perf-dependency &quot;com.google.firebase:firebase-perf:19.0.9&quot;&gt;&#10;  &lt;!-- Cloud Messaging--&gt;&#10;  &lt;!ENTITY messaging-dependency &quot;com.google.firebase:firebase-messaging:20.3.0&quot;&gt;&#10;  &lt;!-- Authentication--&gt;&#10;  &lt;!ENTITY auth-dependency &quot;com.google.firebase:firebase-auth:19.4.0&quot;&gt;&#10;  &lt;!-- Realtime Database--&gt;&#10;  &lt;!ENTITY database-dependency &quot;com.google.firebase:firebase-database:19.5.0&quot;&gt;&#10;  &lt;!-- Cloud Storage--&gt;&#10;  &lt;!ENTITY storage-dependency &quot;com.google.firebase:firebase-storage:19.2.0&quot;&gt;&#10;  &lt;!-- Remote Config--&gt;&#10;  &lt;!ENTITY remote-config-dependency &quot;com.google.firebase:firebase-config:19.2.0&quot;&gt;&#10;  &lt;!-- App Indexing--&gt;&#10;  &lt;!ENTITY appindexing-dependency &quot;com.google.firebase:firebase-appindexing:19.1.0&quot;&gt;&#10;  &lt;!-- Admob--&gt;&#10;  &lt;!ENTITY ads-dependency &quot;com.google.firebase:firebase-ads:19.4.0&quot;&gt;&#10;  &lt;!-- Cloud Firestore--&gt;&#10;  &lt;!ENTITY firestore-dependency &quot;com.google.firebase:firebase-firestore:21.7.1&quot;&gt;&#10;  &lt;!-- Firebase Functions--&gt;&#10;  &lt;!ENTITY functions-dependency &quot;com.google.firebase:firebase-functions:19.1.0&quot;&gt;&#10;  &lt;!-- Firebase Dynamic Links--&gt;&#10;  &lt;!ENTITY fdl-dependency &quot;com.google.firebase:firebase-dynamic-links:19.1.1&quot;&gt;&#10;  &lt;!-- FIAM Display--&gt;&#10;  &lt;!ENTITY fiamd-dependency &quot;com.google.firebase:firebase-inappmessaging-display:19.1.1&quot;&gt;&#10;  &lt;!-- Firebase MLKit Vision--&gt;&#10;  &lt;!ENTITY ml-vision-dependency &quot;com.google.firebase:firebase-ml-vision:24.1.0&quot;&gt;&#10;&#10;  &lt;!-- Firebase Gradle plugins --&gt;&#10;  &lt;!-- Crashlytics--&gt;&#10;  &lt;!ENTITY crashlytics-plugin-class &quot;com.google.firebase:firebase-crashlytics-gradle:2.3.0&quot;&gt;&#10;  &lt;!ENTITY crashlytics-plugin &quot;com.google.firebase.crashlytics&quot;&gt;&#10;&#10;  &lt;!-- Performance Monitoring --&gt;&#10;  &lt;!ENTITY perf-plugin &quot;com.google.firebase.firebase-perf&quot;&gt;&#10;  &lt;!ENTITY perf-plugin-class &quot;com.google.firebase:perf-plugin:1.3.2&quot;&gt;&#10;]&gt;&#10;&#10;&#10;&lt;tutorialBundle&#10;    icon=&quot;firebase_plugin_16.png&quot;&#10;    logo=&quot;firebase_logo.png&quot;&#10;    name=&quot;Firebase&quot;&#10;    resourceRoot=&quot;/firebase&quot;&gt;&#10;  &lt;welcome&gt;&#10;    &lt;![CDATA[Firebase gives you the tools and infrastructure from Google to help you develop, grow and earn money from your app.&#10;      &lt;a href=&quot;https://firebase.google.com/?utm_source=studio&quot;&gt;Learn more&lt;/a&gt;]]&gt;&#10;  &lt;/welcome&gt;&#10;  &lt;feature&#10;      icon=&quot;fb_analytics.png&quot;&#10;      name=&quot;Analytics&quot;&#10;      resourceRoot=&quot;/firebase_core&quot;&#10;      serviceId=&quot;firebase.analytics&quot;&gt;&#10;    &lt;description&gt;&#10;      &lt;![CDATA[Measure user activity and engagement with free, easy, and unlimited analytics.&#10;        &lt;a href=&quot;https://firebase.google.com/docs/analytics/?utm_source=studio&quot;&gt;More info&lt;/a&gt;]]&gt;&#10;    &lt;/description&gt;&#10;    &lt;tutorial&#10;        key=&quot;analytics-get-started-with-analytics-for-android&quot;&#10;        label=&quot;Log an Analytics event&quot;&#10;        remoteLink=&quot;https://firebase.google.com/docs/analytics/android/start/&quot;&#10;        remoteLinkLabel=&quot;Launch in browser&quot;&gt;&#10;      &lt;description&gt;&#10;        &lt;![CDATA[Add Analytics to your app to log events and define audiences with user properties.]]&gt;&#10;      &lt;/description&gt;&#10;      &lt;step label=&quot;Connect your app to Firebase&quot;&gt;&#10;        &lt;stepElement&gt;&#10;          &lt;action&#10;              key=&quot;firebase.connect&quot;&#10;              label=&quot;Connect to Firebase&quot;&#10;              successMessage=&quot;Connected&quot;&gt;&#10;          &lt;/action&gt;&#10;        &lt;/stepElement&gt;&#10;      &lt;/step&gt;&#10;      &lt;step label=&quot;Add Analytics to your app&quot;&gt;&#10;        &lt;stepElement&gt;&#10;          &lt;action&#10;              actionArgument=&quot;firebase.analytics&quot;&#10;              key=&quot;firebase.add_dependencies&quot;&#10;              label=&quot;Add Analytics to your app&quot;&#10;              successMessage=&quot;Dependencies set up correctly&quot;&gt;&#10;            &lt;recipe&gt;&#10;              &lt;classpath mavenUrl=&quot;&amp;google-services-plugin-class;&quot;&gt;&#10;              &lt;/classpath&gt;&#10;              &lt;apply plugin=&quot;&amp;google-services-plugin;&quot;&gt;&#10;              &lt;/apply&gt;&#10;              &lt;dependency mavenUrl=&quot;&amp;analytics-dependency;&quot;&gt;&#10;              &lt;/dependency&gt;&#10;            &lt;/recipe&gt;&#10;          &lt;/action&gt;&#10;        &lt;/stepElement&gt;&#10;        &lt;stepElement&gt;&#10;          &lt;section&gt;&#10;            &lt;![CDATA[Declare the&#10;              &lt;code&gt;com.google.firebase.analytics.FirebaseAnalytics&lt;/code&gt;&#10;              object at the top of your activity]]&gt;&#10;          &lt;/section&gt;&#10;        &lt;/stepElement&gt;&#10;        &lt;stepElement&gt;&#10;          &lt;code fileType=&quot;JAVA&quot;&gt;private FirebaseAnalytics mFirebaseAnalytics;&lt;/code&gt;&#10;        &lt;/stepElement&gt;&#10;        &lt;stepElement&gt;&#10;          &lt;section&gt;&#10;            &lt;![CDATA[Then initialize it in the&#10;              &lt;code&gt;onCreate()&lt;/code&gt;&#10;              method]]&gt;&#10;          &lt;/section&gt;&#10;        &lt;/stepElement&gt;&#10;        &lt;stepElement&gt;&#10;          &lt;code fileType=&quot;JAVA&quot;&gt;// Obtain the FirebaseAnalytics instance.&#10;mFirebaseAnalytics = FirebaseAnalytics.getInstance(this);&lt;/code&gt;&#10;        &lt;/stepElement&gt;&#10;      &lt;/step&gt;&#10;      &lt;step label=&quot;Log events&quot;&gt;&#10;        &lt;stepElement&gt;&#10;          &lt;section&gt;&#10;            &lt;![CDATA[Once you have created a&#10;              &lt;code&gt;FirebaseAnalytics&lt;/code&gt;&#10;              instance, you can use it to log either predefined or custom events with the&#10;              &lt;a href=&quot;https://firebase.google.com/docs/reference/android/com/google/firebase/analytics/FirebaseAnalytics.html?utm_source=studio#logEvent(java.lang.String,%20android.os.Bundle)&quot;&gt;&lt;code&gt;logEvent()&lt;/code&gt;&lt;/a&gt;&#10;              method. You can explore the predefined events and parameters in the&#10;              &lt;a href=&quot;https://firebase.google.com/docs/reference/android/com/google/firebase/analytics/FirebaseAnalytics.Event?utm_source=studio&quot;&gt;&lt;code&gt;FirebaseAnalytics.Event&lt;/code&gt;&lt;/a&gt;&#10;              and&#10;              &lt;a href=&quot;https://firebase.google.com/docs/reference/android/com/google/firebase/analytics/FirebaseAnalytics.Param?utm_source=studio&quot;&gt;&lt;code&gt;FirebaseAnalytics.Param&lt;/code&gt;&lt;/a&gt;&#10;              reference documentation.]]&gt;&#10;          &lt;/section&gt;&#10;        &lt;/stepElement&gt;&#10;        &lt;stepElement&gt;&#10;          &lt;section&gt;&#10;            &lt;![CDATA[The following code logs a&#10;              &lt;a href=&quot;https://firebase.google.com/docs/reference/android/com/google/firebase/analytics/FirebaseAnalytics.Event.html?utm_source=studio#SELECT_CONTENT&quot;&gt;&lt;code&gt;SELECT_CONTENT&lt;/code&gt;&lt;/a&gt;&#10;              Event when a user clicks on a specific element in your app.]]&gt;&#10;          &lt;/section&gt;&#10;        &lt;/stepElement&gt;&#10;        &lt;stepElement&gt;&#10;          &lt;code fileType=&quot;JAVA&quot;&gt;Bundle bundle = new Bundle();&#10;bundle.putString(FirebaseAnalytics.Param.ITEM_ID, id);&#10;bundle.putString(FirebaseAnalytics.Param.ITEM_NAME, name);&#10;bundle.putString(FirebaseAnalytics.Param.CONTENT_TYPE, &quot;image&quot;);&#10;mFirebaseAnalytics.logEvent(FirebaseAnalytics.Event.SELECT_CONTENT, bundle);&lt;/code&gt;&#10;        &lt;/stepElement&gt;&#10;      &lt;/step&gt;&#10;      &lt;step label=&quot;Next Steps&quot;&gt;&#10;        &lt;stepElement&gt;&#10;          &lt;section&gt;&#10;            &lt;![CDATA[&lt;ul&gt;&#10;                &lt;li&gt;&#10;                  See your data refresh periodically in the&#10;                  &lt;a&#10;                      class=&quot;gc-analytics-event&quot;&#10;                      data-action=&quot;linkClick&quot;&#10;                      data-category=&quot;console&quot;&#10;                      href=&quot;https://console.firebase.google.com/?utm_source=studio&quot;&gt;Firebase console&lt;/a&gt;&#10;                  .&#10;                &lt;/li&gt;&#10;                &lt;li&gt;&#10;                  Explore the guides on&#10;                  &lt;a href=&quot;https://firebase.google.com/docs/analytics/android/events?utm_source=studio&quot;&gt;logging events&lt;/a&gt;&#10;                  and&#10;                  &lt;a href=&quot;https://firebase.google.com/docs/analytics/android/properties?utm_source=studio&quot;&gt;setting user properties&lt;/a&gt;&#10;                  .&#10;                &lt;/li&gt;&#10;              &lt;/ul&gt;]]&gt;&#10;          &lt;/section&gt;&#10;        &lt;/stepElement&gt;&#10;      &lt;/step&gt;&#10;    &lt;/tutorial&gt;&#10;  &lt;/feature&gt;&#10;  &lt;feature&#10;      icon=&quot;fb_auth.png&quot;&#10;      name=&quot;Authentication&quot;&#10;      resourceRoot=&quot;/firebase_auth&quot;&#10;      serviceId=&quot;firebase.auth&quot;&gt;&#10;    &lt;description&gt;&#10;      &lt;![CDATA[Sign in and manage users with ease, accepting emails, Google Sign-In, Facebook and other login providers.&#10;        &lt;a href=&quot;https://firebase.google.com/docs/auth/?utm_source=studio&quot;&gt;More info&lt;/a&gt;]]&gt;&#10;    &lt;/description&gt;&#10;    &lt;tutorial&#10;        key=&quot;authentication-set-up-firebase-authentication-for-android&quot;&#10;        label=&quot;Email and password authentication&quot;&#10;        remoteLink=&quot;https://firebase.google.com/docs/auth/android/start/&quot;&#10;        remoteLinkLabel=&quot;Launch in browser&quot;&gt;&#10;      &lt;description&gt;&#10;        &lt;![CDATA[You can use Firebase Authentication to let your users sign in with their email addresses and passwords, and to manage your app's password-based accounts. This tutorial helps you set up an email and password system and then access information about the user.]]&gt;&#10;      &lt;/description&gt;&#10;      &lt;step label=&quot;Connect your app to Firebase&quot;&gt;&#10;        &lt;stepElement&gt;&#10;          &lt;action&#10;              key=&quot;firebase.connect&quot;&#10;              label=&quot;Connect to Firebase&quot;&#10;              successMessage=&quot;Connected&quot;&gt;&#10;          &lt;/action&gt;&#10;        &lt;/stepElement&gt;&#10;      &lt;/step&gt;&#10;      &lt;step label=&quot;Add Firebase Authentication to your app&quot;&gt;&#10;        &lt;stepElement&gt;&#10;          &lt;action&#10;              actionArgument=&quot;firebase.auth&quot;&#10;              key=&quot;firebase.add_dependencies&quot;&#10;              label=&quot;Add Firebase Authentication to your app&quot;&#10;              successMessage=&quot;Dependencies set up correctly&quot;&gt;&#10;            &lt;recipe&gt;&#10;              &lt;classpath mavenUrl=&quot;&amp;google-services-plugin-class;&quot;&gt;&#10;              &lt;/classpath&gt;&#10;              &lt;apply plugin=&quot;&amp;google-services-plugin;&quot;&gt;&#10;              &lt;/apply&gt;&#10;              &lt;dependency mavenUrl=&quot;&amp;auth-dependency;&quot;&gt;&#10;              &lt;/dependency&gt;&#10;            &lt;/recipe&gt;&#10;          &lt;/action&gt;&#10;        &lt;/stepElement&gt;&#10;        &lt;stepElement&gt;&#10;          &lt;section&gt;&#10;            &lt;![CDATA[To use an authentication provider, you need to enable it in the&#10;              &lt;a&#10;                  class=&quot;gc-analytics-event&quot;&#10;                  data-action=&quot;linkClick&quot;&#10;                  data-category=&quot;console&quot;&#10;                  href=&quot;https://console.firebase.google.com/?utm_source=studio&quot;&gt;Firebase console&lt;/a&gt;&#10;              .&#10;Go to the Sign-in Method page in the Firebase Authentication section to enable Email/Password sign-in and any other identity providers you want for your app.]]&gt;&#10;          &lt;/section&gt;&#10;        &lt;/stepElement&gt;&#10;      &lt;/step&gt;&#10;      &lt;step label=&quot;Check current auth state&quot;&gt;&#10;        &lt;stepElement&gt;&#10;          &lt;section&gt;&#10;            &lt;![CDATA[Declare an instance of&#10;              &lt;code&gt;FirebaseAuth&lt;/code&gt;]]&gt;&#10;          &lt;/section&gt;&#10;        &lt;/stepElement&gt;&#10;        &lt;stepElement&gt;&#10;          &lt;code&gt;private FirebaseAuth mAuth;&lt;/code&gt;&#10;        &lt;/stepElement&gt;&#10;        &lt;stepElement&gt;&#10;          &lt;section&gt;&#10;            &lt;![CDATA[In the&#10;              &lt;code&gt;onCreate()&lt;/code&gt;&#10;              method, initialize the&#10;              &lt;code&gt;FirebaseAuth&lt;/code&gt;&#10;              instance.]]&gt;&#10;          &lt;/section&gt;&#10;        &lt;/stepElement&gt;&#10;        &lt;stepElement&gt;&#10;          &lt;code&gt;mAuth = FirebaseAuth.getInstance();&lt;/code&gt;&#10;        &lt;/stepElement&gt;&#10;        &lt;stepElement&gt;&#10;          &lt;section&gt;&#10;            &lt;![CDATA[When initializing your Activity, check to see if the user is currently signed in.]]&gt;&#10;          &lt;/section&gt;&#10;        &lt;/stepElement&gt;&#10;        &lt;stepElement&gt;&#10;          &lt;code&gt;@Override&#10;public void onStart() {&#10;    super.onStart();&#10;    // Check if user is signed in (non-null) and update UI accordingly.&#10;    FirebaseUser currentUser = mAuth.getCurrentUser();&#10;    updateUI(currentUser);&#10;}&lt;/code&gt;&#10;        &lt;/stepElement&gt;&#10;      &lt;/step&gt;&#10;      &lt;step label=&quot;Sign up new users&quot;&gt;&#10;        &lt;stepElement&gt;&#10;          &lt;section&gt;&#10;            &lt;![CDATA[Create a new&#10;              &lt;code&gt;createAccount&lt;/code&gt;&#10;              method which takes in an email address and password, validates them and then creates a new user with the&#10;              &lt;a href=&quot;https://firebase.google.com/docs/reference/android/com/google/firebase/auth/FirebaseAuth.html?utm_source=studio#createUserWithEmailAndPassword(java.lang.String, java.lang.String)&quot;&gt;&lt;code&gt;createUserWithEmailAndPassword&lt;/code&gt;&lt;/a&gt;&#10;              method.]]&gt;&#10;          &lt;/section&gt;&#10;        &lt;/stepElement&gt;&#10;        &lt;stepElement&gt;&#10;          &lt;code fileType=&quot;JAVA&quot;&gt;mAuth.createUserWithEmailAndPassword(email, password)&#10;        .addOnCompleteListener(this, new OnCompleteListener&amp;lt;AuthResult&amp;gt;() {&#10;            @Override&#10;            public void onComplete(@NonNull Task&amp;lt;AuthResult&amp;gt; task) {&#10;                if (task.isSuccessful()) {&#10;                    // Sign in success, update UI with the signed-in user's information&#10;                    Log.d(TAG, &quot;createUserWithEmail:success&quot;);&#10;                    FirebaseUser user = mAuth.getCurrentUser();&#10;                    updateUI(user);&#10;                } else {&#10;                    // If sign in fails, display a message to the user.&#10;                    Log.w(TAG, &quot;createUserWithEmail:failure&quot;, task.getException());&#10;                    Toast.makeText(EmailPasswordActivity.this, &quot;Authentication failed.&quot;,&#10;                            Toast.LENGTH_SHORT).show();&#10;                    updateUI(null);&#10;                }&#10;&#10;                // ...&#10;            }&#10;        });&lt;/code&gt;&#10;        &lt;/stepElement&gt;&#10;        &lt;stepElement&gt;&#10;          &lt;section&gt;&#10;            &lt;![CDATA[Add a form to register new users with their email and password and call this new method when it is submitted. You can see an example in our&#10;              &lt;a href=&quot;https://github.com/firebase/quickstart-android/tree/master/auth/app/src/main?utm_source=studio&quot;&gt;quickstart sample&lt;/a&gt;&#10;              .]]&gt;&#10;          &lt;/section&gt;&#10;        &lt;/stepElement&gt;&#10;      &lt;/step&gt;&#10;      &lt;step label=&quot;Sign in existing users&quot;&gt;&#10;        &lt;stepElement&gt;&#10;          &lt;section&gt;&#10;            &lt;![CDATA[Create a new&#10;              &lt;code&gt;signIn&lt;/code&gt;&#10;              method which takes in an email address and password, validates them, and then signs a user in with the&#10;              &lt;a href=&quot;https://firebase.google.com/docs/reference/android/com/google/firebase/auth/FirebaseAuth.html?utm_source=studio#signInWithEmailAndPassword(java.lang.String, java.lang.String)&quot;&gt;&lt;code&gt;signInWithEmailAndPassword&lt;/code&gt;&lt;/a&gt;&#10;              method.]]&gt;&#10;          &lt;/section&gt;&#10;        &lt;/stepElement&gt;&#10;        &lt;stepElement&gt;&#10;          &lt;code fileType=&quot;JAVA&quot;&gt;mAuth.signInWithEmailAndPassword(email, password)&#10;        .addOnCompleteListener(this, new OnCompleteListener&amp;lt;AuthResult&amp;gt;() {&#10;            @Override&#10;            public void onComplete(@NonNull Task&amp;lt;AuthResult&amp;gt; task) {&#10;                if (task.isSuccessful()) {&#10;                    // Sign in success, update UI with the signed-in user's information&#10;                    Log.d(TAG, &quot;signInWithEmail:success&quot;);&#10;                    FirebaseUser user = mAuth.getCurrentUser();&#10;                    updateUI(user);&#10;                } else {&#10;                    // If sign in fails, display a message to the user.&#10;                    Log.w(TAG, &quot;signInWithEmail:failure&quot;, task.getException());&#10;                    Toast.makeText(EmailPasswordActivity.this, &quot;Authentication failed.&quot;,&#10;                            Toast.LENGTH_SHORT).show();&#10;                    updateUI(null);&#10;                }&#10;&#10;                // ...&#10;            }&#10;        });&lt;/code&gt;&#10;        &lt;/stepElement&gt;&#10;        &lt;stepElement&gt;&#10;          &lt;section&gt;&#10;            &lt;![CDATA[Add a form to sign in users with their email and password and call this new method when it is submitted. You can see an example in our&#10;              &lt;a href=&quot;https://github.com/firebase/quickstart-android/tree/master/auth/app/src/main?utm_source=studio&quot;&gt;quickstart sample&lt;/a&gt;&#10;              .]]&gt;&#10;          &lt;/section&gt;&#10;        &lt;/stepElement&gt;&#10;      &lt;/step&gt;&#10;      &lt;step label=&quot;Access user information&quot;&gt;&#10;        &lt;stepElement&gt;&#10;          &lt;section&gt;&#10;            &lt;![CDATA[If a user has signed in successfully you can get their account data at any point with the&#10;              &lt;code&gt;getCurrentUser&lt;/code&gt;&#10;              method.]]&gt;&#10;          &lt;/section&gt;&#10;        &lt;/stepElement&gt;&#10;        &lt;stepElement&gt;&#10;          &lt;code fileType=&quot;JAVA&quot;&gt;FirebaseUser user = FirebaseAuth.getInstance().getCurrentUser();&#10;if (user != null) {&#10;    // Name, email address, and profile photo Url&#10;    String name = user.getDisplayName();&#10;    String email = user.getEmail();&#10;    Uri photoUrl = user.getPhotoUrl();&#10;&#10;    // Check if user's email is verified&#10;    boolean emailVerified = user.isEmailVerified();&#10;&#10;    // The user's ID, unique to the Firebase project. Do NOT use this value to&#10;    // authenticate with your backend server, if you have one. Use&#10;    // FirebaseUser.getIdToken() instead.&#10;    String uid = user.getUid();&#10;}&lt;/code&gt;&#10;        &lt;/stepElement&gt;&#10;      &lt;/step&gt;&#10;      &lt;step label=&quot;Optional: Configure ProGuard&quot;&gt;&#10;        &lt;stepElement&gt;&#10;          &lt;section&gt;&#10;            &lt;![CDATA[&lt;a name=&quot;proguard&quot;&gt;&lt;/a&gt;&#10;              When using Firebase Authentication in your app along with ProGuard add the following flags to your&#10;              &lt;code&gt;proguard-rules.pro&lt;/code&gt;&#10;              file to ensure that your app works correctly:]]&gt;&#10;          &lt;/section&gt;&#10;        &lt;/stepElement&gt;&#10;        &lt;stepElement&gt;&#10;          &lt;code&gt;-keepattributes Signature&#10;-keepattributes *Annotation*&lt;/code&gt;&#10;        &lt;/stepElement&gt;&#10;      &lt;/step&gt;&#10;      &lt;step label=&quot;Next Steps&quot;&gt;&#10;        &lt;stepElement&gt;&#10;          &lt;section&gt;&#10;            &lt;![CDATA[Explore the guides on adding other identity and authentication services:]]&gt;&#10;          &lt;/section&gt;&#10;        &lt;/stepElement&gt;&#10;        &lt;stepElement&gt;&#10;          &lt;section&gt;&#10;            &lt;![CDATA[&lt;ul&gt;&#10;                &lt;li&gt;&#10;                  &lt;a href=&quot;https://firebase.google.com/docs/auth/android/google-signin?utm_source=studio&quot;&gt;Google Sign-in&lt;/a&gt;&#10;                &lt;/li&gt;&#10;                &lt;li&gt;&#10;                  &lt;a href=&quot;https://firebase.google.com/docs/auth/android/facebook-login?utm_source=studio&quot;&gt;Facebook Login&lt;/a&gt;&#10;                &lt;/li&gt;&#10;                &lt;li&gt;&#10;                  &lt;a href=&quot;https://firebase.google.com/docs/auth/android/anonymous-auth?utm_source=studio&quot;&gt;Anonymous Authentication&lt;/a&gt;&#10;                &lt;/li&gt;&#10;              &lt;/ul&gt;]]&gt;&#10;          &lt;/section&gt;&#10;        &lt;/stepElement&gt;&#10;      &lt;/step&gt;&#10;    &lt;/tutorial&gt;&#10;  &lt;/feature&gt;&#10;  &lt;feature&#10;      icon=&quot;fb_database.png&quot;&#10;      name=&quot;Realtime Database&quot;&#10;      resourceRoot=&quot;/firebase_database&quot;&#10;      serviceId=&quot;firebase.database&quot;&gt;&#10;    &lt;description&gt;&#10;      &lt;![CDATA[Store and sync data in realtime across all connected clients.&#10;        &lt;a href=&quot;https://firebase.google.com/docs/database/?utm_source=studio&quot;&gt;More info&lt;/a&gt;]]&gt;&#10;    &lt;/description&gt;&#10;    &lt;tutorial&#10;        key=&quot;realtime-database-set-up-firebase-realtime-database-for-android&quot;&#10;        label=&quot;Save and retrieve data&quot;&#10;        remoteLink=&quot;https://firebase.google.com/docs/database/android/start/&quot;&#10;        remoteLinkLabel=&quot;Launch in browser&quot;&gt;&#10;      &lt;description&gt;&#10;        &lt;![CDATA[Our cloud database stays synced to all connected clients in realtime and remains available when your app goes offline. Data is stored in a JSON tree structure rather than a table, eliminating the need for complex SQL queries.]]&gt;&#10;      &lt;/description&gt;&#10;      &lt;step label=&quot;Connect your app to Firebase&quot;&gt;&#10;        &lt;stepElement&gt;&#10;          &lt;action&#10;              key=&quot;firebase.connect&quot;&#10;              label=&quot;Connect to Firebase&quot;&#10;              successMessage=&quot;Connected&quot;&gt;&#10;          &lt;/action&gt;&#10;        &lt;/stepElement&gt;&#10;      &lt;/step&gt;&#10;      &lt;step label=&quot;Add the Realtime Database to your app&quot;&gt;&#10;        &lt;stepElement&gt;&#10;          &lt;action&#10;              actionArgument=&quot;firebase.database&quot;&#10;              key=&quot;firebase.add_dependencies&quot;&#10;              label=&quot;Add the Realtime Database to your app&quot;&#10;              successMessage=&quot;Dependencies set up correctly&quot;&gt;&#10;            &lt;recipe&gt;&#10;              &lt;classpath mavenUrl=&quot;&amp;google-services-plugin-class;&quot;&gt;&#10;              &lt;/classpath&gt;&#10;              &lt;apply plugin=&quot;&amp;google-services-plugin;&quot;&gt;&#10;              &lt;/apply&gt;&#10;              &lt;dependency mavenUrl=&quot;&amp;database-dependency;&quot;&gt;&#10;              &lt;/dependency&gt;&#10;            &lt;/recipe&gt;&#10;          &lt;/action&gt;&#10;        &lt;/stepElement&gt;&#10;      &lt;/step&gt;&#10;      &lt;step label=&quot;Configure Firebase Database Rules&quot;&gt;&#10;        &lt;stepElement&gt;&#10;          &lt;section&gt;&#10;            &lt;![CDATA[The Realtime Database provides a declarative rules language that allows you to define how your data should be structured, how it should be indexed, and when your data can be read from and written to. By default, read and write access to your database is restricted so only authenticated users can read or write data. To get started without setting up&#10;              &lt;a href=&quot;https://firebase.google.com/docs/auth/?utm_source=studio&quot;&gt;Authentication&lt;/a&gt;&#10;              , you can&#10;              &lt;a href=&quot;https://firebase.google.com/docs/database/security/quickstart?utm_source=studio#sample-rules&quot;&gt;configure your rules for public access&lt;/a&gt;&#10;              . This does make your database open to anyone, even people not using your app, so be sure to restrict your database again when you set up authentication.]]&gt;&#10;          &lt;/section&gt;&#10;        &lt;/stepElement&gt;&#10;      &lt;/step&gt;&#10;      &lt;step label=&quot;Write to your database&quot;&gt;&#10;        &lt;stepElement&gt;&#10;          &lt;section&gt;&#10;            &lt;![CDATA[Retrieve an instance of your database using&#10;              &lt;code&gt;getInstance()&lt;/code&gt;&#10;              and reference the location you want to write to.]]&gt;&#10;          &lt;/section&gt;&#10;        &lt;/stepElement&gt;&#10;        &lt;stepElement&gt;&#10;          &lt;code fileType=&quot;JAVA&quot;&gt;// Write a message to the database&#10;FirebaseDatabase database = FirebaseDatabase.getInstance();&#10;DatabaseReference myRef = database.getReference(&quot;message&quot;);&#10;&#10;myRef.setValue(&quot;Hello, World!&quot;);&lt;/code&gt;&#10;        &lt;/stepElement&gt;&#10;        &lt;stepElement&gt;&#10;          &lt;section&gt;&#10;            &lt;![CDATA[You can save a range of data types to the database this way, including Java objects. When you save an object the responses from any getters will be saved as children of this location.]]&gt;&#10;          &lt;/section&gt;&#10;        &lt;/stepElement&gt;&#10;      &lt;/step&gt;&#10;      &lt;step label=&quot;Read from your database&quot;&gt;&#10;        &lt;stepElement&gt;&#10;          &lt;section&gt;&#10;            &lt;![CDATA[To make your app data update in realtime, you should add a&#10;              &lt;code&gt;&lt;a href=&quot;https://firebase.google.com/docs/reference/android/com/google/firebase/database/ValueEventListener?utm_source=studio&quot;&gt;ValueEventListener&lt;/a&gt;&lt;/code&gt;&#10;              to the reference you just created.]]&gt;&#10;          &lt;/section&gt;&#10;        &lt;/stepElement&gt;&#10;        &lt;stepElement&gt;&#10;          &lt;section&gt;&#10;            &lt;![CDATA[The&#10;              &lt;code&gt;onDataChange()&lt;/code&gt;&#10;              method in this class is triggered once when the listener is attached and again every time the data changes, including the children.]]&gt;&#10;          &lt;/section&gt;&#10;        &lt;/stepElement&gt;&#10;        &lt;stepElement&gt;&#10;          &lt;code fileType=&quot;JAVA&quot;&gt;// Read from the database&#10;myRef.addValueEventListener(new ValueEventListener() {&#10;    @Override&#10;    public void onDataChange(DataSnapshot dataSnapshot) {&#10;        // This method is called once with the initial value and again&#10;        // whenever data at this location is updated.&#10;        String value = dataSnapshot.getValue(String.class);&#10;        Log.d(TAG, &quot;Value is: &quot; + value);&#10;    }&#10;&#10;    @Override&#10;    public void onCancelled(DatabaseError error) {&#10;        // Failed to read value&#10;        Log.w(TAG, &quot;Failed to read value.&quot;, error.toException());&#10;    }&#10;});&lt;/code&gt;&#10;        &lt;/stepElement&gt;&#10;      &lt;/step&gt;&#10;      &lt;step label=&quot;Optional: Configure ProGuard&quot;&gt;&#10;        &lt;stepElement&gt;&#10;          &lt;section&gt;&#10;            &lt;![CDATA[&lt;a name=&quot;proguard&quot;&gt;&lt;/a&gt;&#10;              When using Firebase Realtime Database in your app along with ProGuard you need to consider how your model objects will be serialized and deserialized after obfuscation. If you use&#10;              &lt;code&gt;DataSnapshot.getValue(Class)&lt;/code&gt;&#10;              or&#10;              &lt;code&gt;DatabaseReference.setValue(Object)&lt;/code&gt;&#10;              to read and write data you will need to add rules to the&#10;              &lt;code&gt;proguard-rules.pro&lt;/code&gt;&#10;              file:]]&gt;&#10;          &lt;/section&gt;&#10;        &lt;/stepElement&gt;&#10;        &lt;stepElement&gt;&#10;          &lt;code fileType=&quot;PLAIN_TEXT&quot;&gt;&#10;# Add this global rule&#10;-keepattributes Signature&#10;&#10;# This rule will properly ProGuard all the model classes in&#10;# the package com.yourcompany.models. Modify to fit the structure&#10;# of your app.&#10;-keepclassmembers class com.yourcompany.models.** {&#10;  *;&#10;}&lt;/code&gt;&#10;        &lt;/stepElement&gt;&#10;      &lt;/step&gt;&#10;      &lt;step label=&quot;Prepare for Launch&quot;&gt;&#10;        &lt;stepElement&gt;&#10;          &lt;section&gt;&#10;            &lt;![CDATA[Before launching your app, we recommend walking through our&#10;              &lt;a href=&quot;https://firebase.google.com/support/guides/launch-checklist?utm_source=studio&quot;&gt;launch checklist&lt;/a&gt;&#10;              to make sure your app is ready to go!]]&gt;&#10;          &lt;/section&gt;&#10;        &lt;/stepElement&gt;&#10;      &lt;/step&gt;&#10;      &lt;step label=&quot;Next Steps&quot;&gt;&#10;        &lt;stepElement&gt;&#10;          &lt;section&gt;&#10;            &lt;![CDATA[&lt;ul&gt;&#10;                &lt;li&gt;&#10;                  Learn how to&#10;                  &lt;a href=&quot;https://firebase.google.com/docs/database/android/structure-data?utm_source=studio&quot;&gt;structure data&lt;/a&gt;&#10;                  for Realtime Database.&#10;                &lt;/li&gt;&#10;                &lt;li&gt;&#10;                  &lt;a href=&quot;https://firebase.google.com/docs/database/usage/sharding?utm_source=studio&quot;&gt;Scale your data across multiple database instances&lt;/a&gt;&#10;                  .&#10;                &lt;/li&gt;&#10;                &lt;li&gt;&#10;                  &lt;a href=&quot;https://firebase.google.com/docs/database/android/read-and-write?utm_source=studio&quot;&gt;Read and write data.&lt;/a&gt;&#10;                &lt;/li&gt;&#10;                &lt;li&gt;&#10;                  &lt;a href=&quot;https://console.firebase.google.com/project/_/database/data?utm_source=studio&quot;&gt;View your database in the Firebase console.&lt;/a&gt;&#10;                &lt;/li&gt;&#10;              &lt;/ul&gt;]]&gt;&#10;          &lt;/section&gt;&#10;        &lt;/stepElement&gt;&#10;      &lt;/step&gt;&#10;    &lt;/tutorial&gt;&#10;  &lt;/feature&gt;&#10;  &lt;feature&#10;      icon=&quot;fb_firestore.png&quot;&#10;      name=&quot;Firestore&quot;&#10;      resourceRoot=&quot;/firebase_firestore&quot;&#10;      serviceId=&quot;firebase.firestore&quot;&gt;&#10;    &lt;description&gt;&#10;      &lt;![CDATA[Store and sync your app data at global scale&#10;        &lt;a href=&quot;https://firebase.google.com/docs/firestore/?utm_source=studio&quot;&gt;More info&lt;/a&gt;]]&gt;&#10;    &lt;/description&gt;&#10;    &lt;tutorial&#10;        key=&quot;firestore-set-up-cloud-firestore-for-android&quot;&#10;        label=&quot;Read and write documents with Cloud Firestore&quot;&#10;        remoteLink=&quot;https://firebase.google.com/docs/firestore/android/start/&quot;&#10;        remoteLinkLabel=&quot;Launch in browser&quot;&gt;&#10;      &lt;description&gt;&#10;        &lt;![CDATA[Cloud Firestore is a flexible, scalable database for mobile, web, and server development from Firebase and Google Cloud Platform.]]&gt;&#10;      &lt;/description&gt;&#10;      &lt;step label=&quot;Connect your app to Firebase&quot;&gt;&#10;        &lt;stepElement&gt;&#10;          &lt;action&#10;              key=&quot;firebase.connect&quot;&#10;              label=&quot;Connect to Firebase&quot;&#10;              successMessage=&quot;Connected&quot;&gt;&#10;          &lt;/action&gt;&#10;        &lt;/stepElement&gt;&#10;      &lt;/step&gt;&#10;      &lt;step label=&quot;Add Cloud Firestore to your app&quot;&gt;&#10;        &lt;stepElement&gt;&#10;          &lt;action&#10;              actionArgument=&quot;firebase.firestore&quot;&#10;              key=&quot;firebase.add_dependencies&quot;&#10;              label=&quot;Add Cloud Firestore to your app&quot;&#10;              successMessage=&quot;Dependencies set up correctly&quot;&gt;&#10;            &lt;recipe&gt;&#10;              &lt;classpath mavenUrl=&quot;&amp;google-services-plugin-class;&quot;&gt;&#10;              &lt;/classpath&gt;&#10;              &lt;apply plugin=&quot;&amp;google-services-plugin;&quot;&gt;&#10;              &lt;/apply&gt;&#10;              &lt;dependency mavenUrl=&quot;&amp;firestore-dependency;&quot;&gt;&#10;              &lt;/dependency&gt;&#10;            &lt;/recipe&gt;&#10;          &lt;/action&gt;&#10;        &lt;/stepElement&gt;&#10;        &lt;stepElement&gt;&#10;          &lt;section&gt;&#10;            &lt;![CDATA[To use Cloud Firestore, you need to enable it in the&#10;              &lt;a&#10;                  class=&quot;gc-analytics-event&quot;&#10;                  data-action=&quot;linkClick&quot;&#10;                  data-category=&quot;console&quot;&#10;                  href=&quot;https://console.firebase.google.com/?utm_source=studio&quot;&gt;Firebase console&lt;/a&gt;&#10;              .&#10;In the Database secion, click Try Firestore Beta]]&gt;&#10;          &lt;/section&gt;&#10;        &lt;/stepElement&gt;&#10;      &lt;/step&gt;&#10;      &lt;step label=&quot;Initialize Cloud Firestore&quot;&gt;&#10;        &lt;stepElement&gt;&#10;          &lt;section&gt;&#10;            &lt;![CDATA[Declare an instance of&#10;              &lt;code&gt;FirebaseFirestore&lt;/code&gt;]]&gt;&#10;          &lt;/section&gt;&#10;        &lt;/stepElement&gt;&#10;        &lt;stepElement&gt;&#10;          &lt;code fileType=&quot;JAVA&quot;&gt;FirebaseFirestore db = FirebaseFirestore.getInstance();&lt;/code&gt;&#10;        &lt;/stepElement&gt;&#10;      &lt;/step&gt;&#10;      &lt;step label=&quot;Add data&quot;&gt;&#10;        &lt;stepElement&gt;&#10;          &lt;section&gt;&#10;            &lt;![CDATA[Cloud Firestore stores data in Documents, which are stored in Collections. Cloud Firestore creates collections and documents implicitly the first time you add data to the document. You do not need to explicitly create collections or documents.]]&gt;&#10;          &lt;/section&gt;&#10;        &lt;/stepElement&gt;&#10;        &lt;stepElement&gt;&#10;          &lt;section&gt;&#10;            &lt;![CDATA[Create a new collection and a document using the following example code.]]&gt;&#10;          &lt;/section&gt;&#10;        &lt;/stepElement&gt;&#10;        &lt;stepElement&gt;&#10;          &lt;code fileType=&quot;JAVA&quot;&gt;// Create a new user with a first and last name&#10;Map&amp;lt;String, Object&amp;gt; user = new HashMap&amp;lt;&amp;gt;();&#10;user.put(&quot;first&quot;, &quot;Ada&quot;);&#10;user.put(&quot;last&quot;, &quot;Lovelace&quot;);&#10;user.put(&quot;born&quot;, 1815);&#10;&#10;// Add a new document with a generated ID&#10;db.collection(&quot;users&quot;)&#10;        .add(user)&#10;        .addOnSuccessListener(new OnSuccessListener&amp;lt;DocumentReference&amp;gt;() {&#10;            @Override&#10;            public void onSuccess(DocumentReference documentReference) {&#10;                Log.d(TAG, &quot;DocumentSnapshot added with ID: &quot; + documentReference.getId());&#10;            }&#10;        })&#10;        .addOnFailureListener(new OnFailureListener() {&#10;            @Override&#10;            public void onFailure(@NonNull Exception e) {&#10;                Log.w(TAG, &quot;Error adding document&quot;, e);&#10;            }&#10;        });&lt;/code&gt;&#10;        &lt;/stepElement&gt;&#10;        &lt;stepElement&gt;&#10;          &lt;section&gt;&#10;            &lt;![CDATA[Now add another document to the&#10;              &lt;code&gt;users&lt;/code&gt;&#10;              collection. Notice that this document includes a key-value pair (middle name) that does not appear in the first document. Documents in a collection can contain different sets of information.]]&gt;&#10;          &lt;/section&gt;&#10;        &lt;/stepElement&gt;&#10;        &lt;stepElement&gt;&#10;          &lt;code fileType=&quot;JAVA&quot;&gt;// Create a new user with a first, middle, and last name&#10;Map&amp;lt;String, Object&amp;gt; user = new HashMap&amp;lt;&amp;gt;();&#10;user.put(&quot;first&quot;, &quot;Alan&quot;);&#10;user.put(&quot;middle&quot;, &quot;Mathison&quot;);&#10;user.put(&quot;last&quot;, &quot;Turing&quot;);&#10;user.put(&quot;born&quot;, 1912);&#10;&#10;// Add a new document with a generated ID&#10;db.collection(&quot;users&quot;)&#10;        .add(user)&#10;        .addOnSuccessListener(new OnSuccessListener&amp;lt;DocumentReference&amp;gt;() {&#10;            @Override&#10;            public void onSuccess(DocumentReference documentReference) {&#10;                Log.d(TAG, &quot;DocumentSnapshot added with ID: &quot; + documentReference.getId());&#10;            }&#10;        })&#10;        .addOnFailureListener(new OnFailureListener() {&#10;            @Override&#10;            public void onFailure(@NonNull Exception e) {&#10;                Log.w(TAG, &quot;Error adding document&quot;, e);&#10;            }&#10;        });&lt;/code&gt;&#10;        &lt;/stepElement&gt;&#10;      &lt;/step&gt;&#10;      &lt;step label=&quot;Read data&quot;&gt;&#10;        &lt;stepElement&gt;&#10;          &lt;section&gt;&#10;            &lt;![CDATA[To quickly verify that you've added data to Cloud Firestore, use the data viewer in the&#10;              &lt;a href=&quot;https://console.firebase.google.com/project/_/database/firestore/data?utm_source=studio&quot;&gt;Firebase console&lt;/a&gt;&#10;              .]]&gt;&#10;          &lt;/section&gt;&#10;        &lt;/stepElement&gt;&#10;        &lt;stepElement&gt;&#10;          &lt;section&gt;&#10;            &lt;![CDATA[You can also use the&#10;              &lt;code&gt;get&lt;/code&gt;&#10;              method to retrieve the entire collection.]]&gt;&#10;          &lt;/section&gt;&#10;        &lt;/stepElement&gt;&#10;        &lt;stepElement&gt;&#10;          &lt;code fileType=&quot;JAVA&quot;&gt;db.collection(&quot;users&quot;)&#10;        .get()&#10;        .addOnCompleteListener(new OnCompleteListener&amp;lt;QuerySnapshot&amp;gt;() {&#10;            @Override&#10;            public void onComplete(@NonNull Task&amp;lt;QuerySnapshot&amp;gt; task) {&#10;                if (task.isSuccessful()) {&#10;                    for (QueryDocumentSnapshot document : task.getResult()) {&#10;                        Log.d(TAG, document.getId() + &quot; =&amp;gt; &quot; + document.getData());&#10;                    }&#10;                } else {&#10;                    Log.w(TAG, &quot;Error getting documents.&quot;, task.getException());&#10;                }&#10;            }&#10;        });&lt;/code&gt;&#10;        &lt;/stepElement&gt;&#10;      &lt;/step&gt;&#10;      &lt;step label=&quot;Securing your data&quot;&gt;&#10;        &lt;stepElement&gt;&#10;          &lt;section&gt;&#10;            &lt;![CDATA[&lt;ul&gt;&#10;                &lt;li&gt;&#10;                  If you're using the Web, Android, or iOS SDK, use&#10;                  &lt;a href=&quot;https://firebase.google.com/docs/auth/?utm_source=studio&quot;&gt;Firebase Authentication&lt;/a&gt;&#10;                  and&#10;                  &lt;a href=&quot;https://firebase.google.com/docs/firestore/security/get-started?utm_source=studio&quot;&gt;Cloud Firestore Security Rules&lt;/a&gt;&#10;                  to secure your data in Cloud Firestore.&#10;                &lt;/li&gt;&#10;                &lt;li&gt;&#10;                  If you're using one of the server SDKs, use&#10;                  &lt;a href=&quot;https://firebase.google.com/docs/firestore/security/iam?utm_source=studio&quot;&gt;Identity and Access Management (IAM)&lt;/a&gt;&#10;                  to secure your data in Cloud Firestore.&#10;                &lt;/li&gt;&#10;              &lt;/ul&gt;]]&gt;&#10;          &lt;/section&gt;&#10;        &lt;/stepElement&gt;&#10;      &lt;/step&gt;&#10;      &lt;step label=&quot;Next Steps&quot;&gt;&#10;        &lt;stepElement&gt;&#10;          &lt;section&gt;&#10;            &lt;![CDATA[Deepen your knowledge with the following topics:]]&gt;&#10;          &lt;/section&gt;&#10;        &lt;/stepElement&gt;&#10;        &lt;stepElement&gt;&#10;          &lt;section&gt;&#10;            &lt;![CDATA[&lt;ul&gt;&#10;                &lt;li&gt;&#10;                  &lt;a href=&quot;https://firebase.google.com/docs/firestore/data-model?utm_source=studio&quot;&gt;Data model&lt;/a&gt;&#10;                  &amp;#8212; Learn more about how data is structured in Cloud Firestore, including hierarchical data and subcollections.&#10;                &lt;/li&gt;&#10;                &lt;li&gt;&#10;                  &lt;a href=&quot;https://firebase.google.com/docs/firestore/manage-data/add-data?utm_source=studio&quot;&gt;Add data&lt;/a&gt;&#10;                  &amp;#8212; Learn more about creating and updating data in Cloud Firestore.&#10;                &lt;/li&gt;&#10;                &lt;li&gt;&#10;                  &lt;a href=&quot;https://firebase.google.com/docs/firestore/query-data/get-data?utm_source=studio&quot;&gt;Get data&lt;/a&gt;&#10;                  &amp;#8212; Learn more about how to retrieve data.&#10;                &lt;/li&gt;&#10;                &lt;li&gt;&#10;                  &lt;a href=&quot;https://firebase.google.com/docs/firestore/query-data/queries?utm_source=studio&quot;&gt;Perform simple and compound queries&lt;/a&gt;&#10;                  &amp;#8212; Learn how to run simple and compound queries.&#10;                &lt;/li&gt;&#10;                &lt;li&gt;&#10;                  &lt;a href=&quot;https://firebase.google.com/docs/firestore/query-data/order-limit-data?utm_source=studio&quot;&gt;Order and limit queries&lt;/a&gt;&#10;                  &amp;#8212; Learn how to order and limit the data returned by your queries.&#10;                &lt;/li&gt;&#10;              &lt;/ul&gt;]]&gt;&#10;          &lt;/section&gt;&#10;        &lt;/stepElement&gt;&#10;      &lt;/step&gt;&#10;    &lt;/tutorial&gt;&#10;  &lt;/feature&gt;&#10;  &lt;feature&#10;      icon=&quot;fb_storage.png&quot;&#10;      name=&quot;Storage&quot;&#10;      resourceRoot=&quot;/firebase_storage&quot;&#10;      serviceId=&quot;firebase.storage&quot;&gt;&#10;    &lt;description&gt;&#10;      &lt;![CDATA[Store and retrieve large files like images, audio, and video without writing server-side code.&#10;        &lt;a href=&quot;https://firebase.google.com/docs/storage/?utm_source=studio&quot;&gt;More info&lt;/a&gt;]]&gt;&#10;    &lt;/description&gt;&#10;    &lt;tutorial&#10;        key=&quot;storage-upload-and-download-a-file-with-cloud-storage&quot;&#10;        label=&quot;Upload and download a file with Cloud Storage&quot;&#10;        remoteLink=&quot;https://firebase.google.com/docs/storage/android/start/&quot;&#10;        remoteLinkLabel=&quot;Launch in browser&quot;&gt;&#10;      &lt;description&gt;&#10;        &lt;![CDATA[Cloud Storage provides secure file uploads and downloads for your Firebase apps, regardless of network quality. You can use it to store images, audio, video, or other user-generated content.]]&gt;&#10;      &lt;/description&gt;&#10;      &lt;step label=&quot;Connect your app to Firebase&quot;&gt;&#10;        &lt;stepElement&gt;&#10;          &lt;action&#10;              key=&quot;firebase.connect&quot;&#10;              label=&quot;Connect to Firebase&quot;&#10;              successMessage=&quot;Connected&quot;&gt;&#10;          &lt;/action&gt;&#10;        &lt;/stepElement&gt;&#10;      &lt;/step&gt;&#10;      &lt;step label=&quot;Add Cloud Storage to your app&quot;&gt;&#10;        &lt;stepElement&gt;&#10;          &lt;action&#10;              actionArgument=&quot;firebase.storage&quot;&#10;              key=&quot;firebase.add_dependencies&quot;&#10;              label=&quot;Add Cloud Storage to your app&quot;&#10;              successMessage=&quot;Dependencies set up correctly&quot;&gt;&#10;            &lt;recipe&gt;&#10;              &lt;classpath mavenUrl=&quot;&amp;google-services-plugin-class;&quot;&gt;&#10;              &lt;/classpath&gt;&#10;              &lt;apply plugin=&quot;&amp;google-services-plugin;&quot;&gt;&#10;              &lt;/apply&gt;&#10;              &lt;dependency mavenUrl=&quot;&amp;storage-dependency;&quot;&gt;&#10;              &lt;/dependency&gt;&#10;            &lt;/recipe&gt;&#10;          &lt;/action&gt;&#10;        &lt;/stepElement&gt;&#10;      &lt;/step&gt;&#10;      &lt;step label=&quot;Create a reference&quot;&gt;&#10;        &lt;stepElement&gt;&#10;          &lt;section&gt;&#10;            &lt;![CDATA[Declare a&#10;              &lt;a href=&quot;https://firebase.google.com/docs/reference/android/com/google/firebase/storage/StorageReference?utm_source=studio&quot;&gt;&lt;code&gt;StorageReference&lt;/code&gt;&lt;/a&gt;&#10;              and initialize it in the&#10;              &lt;code&gt;onCreate&lt;/code&gt;&#10;              method.]]&gt;&#10;          &lt;/section&gt;&#10;        &lt;/stepElement&gt;&#10;        &lt;stepElement&gt;&#10;          &lt;code fileType=&quot;JAVA&quot;&gt;private StorageReference mStorageRef;&lt;/code&gt;&#10;        &lt;/stepElement&gt;&#10;        &lt;stepElement&gt;&#10;          &lt;code fileType=&quot;JAVA&quot;&gt;mStorageRef = FirebaseStorage.getInstance().getReference();&lt;/code&gt;&#10;        &lt;/stepElement&gt;&#10;      &lt;/step&gt;&#10;      &lt;step label=&quot;Upload a file&quot;&gt;&#10;        &lt;stepElement&gt;&#10;          &lt;section&gt;&#10;            &lt;![CDATA[The simplest way to upload to your storage bucket is by uploading a local file, such as photos and videos from the camera, using the&#10;              &lt;a href=&quot;https://firebase.google.com/docs/reference/android/com/google/firebase/storage/StorageReference?utm_source=studio#putFile(android.net.Uri)&quot;&gt;&lt;code&gt;putFile()&lt;/code&gt;&lt;/a&gt;&#10;              method. You can also upload raw data using&#10;              &lt;a href=&quot;https://firebase.google.com/docs/reference/android/com/google/firebase/storage/StorageReference?utm_source=studio#putBytes(byte[])&quot;&gt;&lt;code&gt;putBytes()&lt;/code&gt;&lt;/a&gt;&#10;              or from an&#10;              &lt;code&gt;InputStream&lt;/code&gt;&#10;              using&#10;              &lt;a href=&quot;https://firebase.google.com/docs/reference/android/com/google/firebase/storage/StorageReference?utm_source=studio#putStream(java.io.InputStream)&quot;&gt;&lt;code&gt;putStream()&lt;/code&gt;&lt;/a&gt;&#10;              .]]&gt;&#10;          &lt;/section&gt;&#10;        &lt;/stepElement&gt;&#10;        &lt;stepElement&gt;&#10;          &lt;code fileType=&quot;JAVA&quot;&gt;&#10;Uri file = Uri.fromFile(new File(&quot;path/to/images/rivers.jpg&quot;));&#10;StorageReference riversRef = storageRef.child(&quot;images/rivers.jpg&quot;);&#10;&#10;riversRef.putFile(file)&#10;    .addOnSuccessListener(new OnSuccessListener&amp;lt;UploadTask.TaskSnapshot&amp;gt;() {&#10;        @Override&#10;        public void onSuccess(UploadTask.TaskSnapshot taskSnapshot) {&#10;            // Get a URL to the uploaded content&#10;            Uri downloadUrl = taskSnapshot.getDownloadUrl();&#10;        }&#10;    })&#10;    .addOnFailureListener(new OnFailureListener() {&#10;        @Override&#10;        public void onFailure(@NonNull Exception exception) {&#10;            // Handle unsuccessful uploads&#10;            // ...&#10;        }&#10;    });&lt;/code&gt;&#10;        &lt;/stepElement&gt;&#10;        &lt;stepElement&gt;&#10;          &lt;section&gt;&#10;            &lt;![CDATA[After starting the&#10;              &lt;a href=&quot;https://firebase.google.com/docs/reference/android/com/google/firebase/storage/UploadTask?utm_source=studio&quot;&gt;&lt;code&gt;UploadTask&lt;/code&gt;&lt;/a&gt;&#10;              you can manage it using the&#10;              &lt;a href=&quot;https://firebase.google.com/docs/reference/android/com/google/firebase/storage/StorageTask?utm_source=studio#pause()&quot;&gt;&lt;code&gt;pause()&lt;/code&gt;&lt;/a&gt;&#10;              ,&#10;              &lt;a href=&quot;https://firebase.google.com/docs/reference/android/com/google/firebase/storage/StorageTask?utm_source=studio#resume()&quot;&gt;&lt;code&gt;resume()&lt;/code&gt;&lt;/a&gt;&#10;              and&#10;              &lt;a href=&quot;https://firebase.google.com/docs/reference/android/com/google/firebase/storage/StorageTask?utm_source=studio#cancel()&quot;&gt;&lt;code&gt;cancel()&lt;/code&gt;&lt;/a&gt;&#10;              methods.]]&gt;&#10;          &lt;/section&gt;&#10;        &lt;/stepElement&gt;&#10;      &lt;/step&gt;&#10;      &lt;step label=&quot;Download a file&quot;&gt;&#10;        &lt;stepElement&gt;&#10;          &lt;section&gt;&#10;            &lt;![CDATA[The code below downloads a local file using the&#10;              &lt;a href=&quot;https://firebase.google.com/docs/reference/android/com/google/firebase/storage/StorageReference?utm_source=studio#getFile(java.io.File)&quot;&gt;&lt;code&gt;getFile()&lt;/code&gt;&lt;/a&gt;&#10;              method. You can also download to device memory using&#10;              &lt;a href=&quot;https://firebase.google.com/docs/reference/android/com/google/firebase/storage/StorageReference?utm_source=studio#getBytes(long)&quot;&gt;&lt;code&gt;getBytes()&lt;/code&gt;&lt;/a&gt;&#10;              .]]&gt;&#10;          &lt;/section&gt;&#10;        &lt;/stepElement&gt;&#10;        &lt;stepElement&gt;&#10;          &lt;code fileType=&quot;JAVA&quot;&gt;&#10;File localFile = File.createTempFile(&quot;images&quot;, &quot;jpg&quot;);&#10;riversRef.getFile(localFile)&#10;    .addOnSuccessListener(new OnSuccessListener&amp;lt;FileDownloadTask.TaskSnapshot&amp;gt;() {&#10;        @Override&#10;        public void onSuccess(FileDownloadTask.TaskSnapshot taskSnapshot) {&#10;            // Successfully downloaded data to local file&#10;            // ...&#10;        }&#10;    }).addOnFailureListener(new OnFailureListener() {&#10;        @Override&#10;        public void onFailure(@NonNull Exception exception) {&#10;            // Handle failed download&#10;            // ...&#10;        }&#10;    });&lt;/code&gt;&#10;        &lt;/stepElement&gt;&#10;      &lt;/step&gt;&#10;      &lt;step label=&quot;Next Steps&quot;&gt;&#10;        &lt;stepElement&gt;&#10;          &lt;section&gt;&#10;            &lt;![CDATA[You can view the files in your storage bucket in the&#10;              &lt;a&#10;                  class=&quot;gc-analytics-event&quot;&#10;                  data-action=&quot;linkClick&quot;&#10;                  data-category=&quot;console&quot;&#10;                  href=&quot;https://console.firebase.google.com/?utm_source=studio&quot;&gt;Firebase console&lt;/a&gt;&#10;              .]]&gt;&#10;          &lt;/section&gt;&#10;        &lt;/stepElement&gt;&#10;        &lt;stepElement&gt;&#10;          &lt;section&gt;&#10;            &lt;![CDATA[Learn best practices and explore different methods to upload and download in the&#10;              &lt;a href=&quot;https://firebase.google.com/docs/storage/?utm_source=studio&quot;&gt;documentation&lt;/a&gt;&#10;              .]]&gt;&#10;          &lt;/section&gt;&#10;        &lt;/stepElement&gt;&#10;      &lt;/step&gt;&#10;    &lt;/tutorial&gt;&#10;  &lt;/feature&gt;&#10;  &lt;feature&#10;      icon=&quot;fb_crashlytics.png&quot;&#10;      name=&quot;Crashlytics&quot;&#10;      resourceRoot=&quot;/firebase_crashlytics&quot;&#10;      serviceId=&quot;firebase.crashlytics&quot;&gt;&#10;    &lt;description&gt;&#10;      &lt;![CDATA[Get clear, actionable insight into app issues that erode your app quality.&#10;        &lt;a href=&quot;https://firebase.google.com/docs/crashlytics/?utm_source=studio&quot;&gt;More info&lt;/a&gt;]]&gt;&#10;    &lt;/description&gt;&#10;    &lt;!-- LINT.IfChange(crashlytics_tutorial) --&gt;&#10;    &lt;tutorial&#10;        key=&quot;crashlytics-get-started-with-crashlytics-for-android&quot;&#10;        label=&quot;Get started with Firebase Crashlytics&quot;&#10;        remoteLink=&quot;https://firebase.google.com/docs/crashlytics/get-started?platform=android%26utm_source=studio&quot;&#10;        remoteLinkLabel=&quot;Launch in browser&quot;&gt;&#10;      &lt;description&gt;&#10;        &lt;![CDATA[Add Firebase Crashlytics to your app to help you track, prioritize, and fix stability issues that erode your app quality.]]&gt;&#10;      &lt;/description&gt;&#10;      &lt;step label=&quot;Connect your app to Firebase&quot;&gt;&#10;        &lt;stepElement&gt;&#10;          &lt;action&#10;              key=&quot;firebase.connect&quot;&#10;              label=&quot;Connect to Firebase&quot;&#10;              successMessage=&quot;Connected&quot;&gt;&#10;          &lt;/action&gt;&#10;        &lt;/stepElement&gt;&#10;      &lt;/step&gt;&#10;      &lt;step label=&quot;Add Crashlytics SDK to your app&quot;&gt;&#10;        &lt;stepElement&gt;&#10;          &lt;action&#10;              actionArgument=&quot;firebase.crashlytics&quot;&#10;              key=&quot;firebase.add_dependencies&quot;&#10;              label=&quot;Add Crashlytics SDK to your app&quot;&#10;              successMessage=&quot;Dependencies set up correctly&quot;&gt;&#10;            &lt;recipe&gt;&#10;              &lt;dependency mavenUrl=&quot;&amp;crashlytics-dependency;&quot;&gt;&#10;              &lt;/dependency&gt;&#10;              &lt;dependency mavenUrl=&quot;&amp;analytics-dependency;&quot;&gt;&#10;              &lt;/dependency&gt;&#10;              &lt;apply plugin=&quot;&amp;google-services-plugin;&quot;&gt;&#10;              &lt;/apply&gt;&#10;              &lt;apply plugin=&quot;&amp;crashlytics-plugin;&quot;&gt;&#10;              &lt;/apply&gt;&#10;              &lt;classpath mavenUrl=&quot;&amp;gradle-plugin-class;&quot;&gt;&#10;              &lt;/classpath&gt;&#10;              &lt;classpath mavenUrl=&quot;&amp;google-services-plugin-class;&quot;&gt;&#10;              &lt;/classpath&gt;&#10;              &lt;classpath mavenUrl=&quot;&amp;crashlytics-plugin-class;&quot;&gt;&#10;              &lt;/classpath&gt;&#10;            &lt;/recipe&gt;&#10;          &lt;/action&gt;&#10;        &lt;/stepElement&gt;&#10;      &lt;/step&gt;&#10;      &lt;step label=&quot;Run your app with Crashlytics&quot;&gt;&#10;        &lt;stepElement&gt;&#10;          &lt;section&gt;&#10;            &lt;![CDATA[Sync your project, then run your app on an emulator or real device to send verification to Firebase that you've successfully integrated Crashlytics.]]&gt;&#10;          &lt;/section&gt;&#10;        &lt;/stepElement&gt;&#10;        &lt;stepElement&gt;&#10;          &lt;section&gt;&#10;            &lt;![CDATA[Requirements for an emulator or device:]]&gt;&#10;          &lt;/section&gt;&#10;        &lt;/stepElement&gt;&#10;        &lt;stepElement&gt;&#10;          &lt;section&gt;&#10;            &lt;![CDATA[&#10;            &lt;ul&gt;&#10;              &lt;li&gt;An Android emulator with a recent image and Google Play services 15.0.0 or later&#10;              &lt;/li&gt;&#10;              &lt;li&gt;A test device with Google Play services 15.0.0 or later&#10;              &lt;/li&gt;&#10;            &lt;/ul&gt;]]&gt;&#10;          &lt;/section&gt;&#10;        &lt;/stepElement&gt;&#10;        &lt;stepElement&gt;&#10;          &lt;section&gt;&#10;            &lt;![CDATA[The Firebase Crashlytics SDK automatically initializes Crashlytics as soon as you add it to your app.&#10;             Your device logs will display the Firebase verification that initialization is complete.&#10;              If you ran your app on an emulator that has network access,&#10;               the &lt;a href=&quot;https://console.firebase.google.com/project/_/crashlytics?utm_source=studio&quot;&gt;Firebase console&lt;/a&gt;&#10;                notifies you that your app connection is complete.]]&gt;&#10;          &lt;/section&gt;&#10;        &lt;/stepElement&gt;&#10;      &lt;/step&gt;&#10;      &lt;step&#10;          label=&quot;Test your Crashlytics implementation by forcing a crash&quot;&gt;&#10;        &lt;stepElement&gt;&#10;          &lt;section&gt;&#10;            &lt;![CDATA[You don't have to wait for a crash to know that Crashlytics is working.&#10;             To force a crash, add a button to your app's &lt;code&gt;MainActivity&lt;/code&gt;, like so:]]&gt;&#10;          &lt;/section&gt;&#10;        &lt;/stepElement&gt;&#10;        &lt;stepElement&gt;&#10;            &lt;code fileType=&quot;JAVA&quot;&gt; // Creates a button that mimics a crash when clicked&#10;Button crashButton = new Button(this);&#10;crashButton.setText(&quot;Crash!&quot;);&#10;crashButton.setOnClickListener(new View.OnClickListener() {&#10;    public void onClick(View view) {&#10;        throw new RuntimeException(&quot;Test Crash&quot;); // Force a crash&#10;    }&#10;});&#10;&#10;addContentView(crashButton, new ViewGroup.LayoutParams(&#10;        ViewGroup.LayoutParams.MATCH_PARENT,&#10;        ViewGroup.LayoutParams.WRAP_CONTENT));&#10;&lt;/code&gt;&#10;        &lt;/stepElement&gt;&#10;        &lt;stepElement&gt;&#10;          &lt;section&gt;&#10;            &lt;![CDATA[To test the implementation, click the button in your app to force the crash, then reopen your app so that Crashlytics can send the report to Firebase.&#10;             The report should appear in the &lt;a href=&quot;https://console.firebase.google.com/project/_/crashlytics?utm_source=studio&quot;&gt;Crashlytics section&lt;/a&gt;&#10;              of the Firebase console within five minutes.]]&gt;&#10;          &lt;/section&gt;&#10;        &lt;/stepElement&gt;&#10;      &lt;/step&gt;&#10;      &lt;step label=&quot;Enable Crashlytics debug logging&quot;&gt;&#10;        &lt;stepElement&gt;&#10;          &lt;section&gt;&#10;            &lt;![CDATA[If your forced crash didn't crash, crashed before you wanted it to,&#10;             or you're experiencing some other issue with Crashlytics,&#10;              you can enable Crashlytics debug logging to track down the problem.]]&gt;&#10;          &lt;/section&gt;&#10;        &lt;/stepElement&gt;&#10;        &lt;stepElement&gt;&#10;          &lt;section&gt;&#10;            &lt;![CDATA[To enable debug logging on your development device,&#10;             set an &lt;code&gt;adb&lt;/code&gt; shell flag before running your app:]]&gt;&#10;          &lt;/section&gt;&#10;        &lt;/stepElement&gt;&#10;        &lt;stepElement&gt;&#10;          &lt;code fileType=&quot;PLAIN_TEXT&quot;&gt;$ adb shell setprop log.tag.FirebaseCrashlytics DEBUG&lt;/code&gt;&#10;        &lt;/stepElement&gt;&#10;        &lt;stepElement&gt;&#10;          &lt;section&gt;&#10;            &lt;![CDATA[To view the logs in your device logs, run the following command:]]&gt;&#10;          &lt;/section&gt;&#10;        &lt;/stepElement&gt;&#10;        &lt;stepElement&gt;&#10;          &lt;code fileType=&quot;PLAIN_TEXT&quot;&gt;$ adb logcat -s FirebaseCrashlytics&lt;/code&gt;&#10;        &lt;/stepElement&gt;&#10;        &lt;stepElement&gt;&#10;          &lt;section&gt;&#10;            &lt;![CDATA[To disable debug logging, set the flag back to INFO:]]&gt;&#10;          &lt;/section&gt;&#10;        &lt;/stepElement&gt;&#10;        &lt;stepElement&gt;&#10;          &lt;code fileType=&quot;PLAIN_TEXT&quot;&gt;$ adb shell setprop log.tag.FirebaseCrashlytics INFO&lt;/code&gt;&#10;        &lt;/stepElement&gt;&#10;      &lt;/step&gt;&#10;      &lt;step label=&quot;Next Steps&quot;&gt;&#10;        &lt;stepElement&gt;&#10;          &lt;section&gt;&#10;            &lt;![CDATA[&#10;              &lt;ul&gt;&#10;                &lt;li&gt;&#10;                  Visit the&#10;                  &lt;a href=&quot;https://firebase.google.com/docs/crashlytics/get-started?platform=android&amp;utm_source=studio&quot;&gt;complete Crashlytics getting started documentation&lt;/a&gt;&#10;                  to learn more about Crashlytics.&#10;                &lt;/li&gt;&#10;                &lt;li&gt;&#10;                Crashlytics automatically starts collecting crash reports as soon as you add the SDK, but you can also&#10;                 &lt;a href=&quot;https://firebase.google.com/docs/crashlytics/customize-crash-reports?platform=android&amp;utm_source=studio&quot;&gt;customize your Firebase Crashlytics crash reports&lt;/a&gt;&#10;                  by adding opt-in reporting, logs, keys, and even tracking of non-fatal errors.&#10;                &lt;/li&gt;&#10;              &lt;/ul&gt;]]&gt;&#10;          &lt;/section&gt;&#10;        &lt;/stepElement&gt;&#10;      &lt;/step&gt;&#10;    &lt;/tutorial&gt;&#10;    &lt;!-- LINT.ThenChange(//depot/google3/third_party/devsite/firebase/en/docs/crashlytics/get-started.md) --&gt;&#10;    &lt;!-- LINT.ThenChange(//depot/google3/third_party/devsite/firebase/en/docs/crashlytics/test-implementation.md) --&gt;&#10;  &lt;/feature&gt;&#10;  &lt;feature&#10;      icon=&quot;fb_perf.png&quot;&#10;      name=&quot;Performance Monitoring&quot;&#10;      resourceRoot=&quot;/firebase_perf&quot;&#10;      serviceId=&quot;firebase.perf&quot;&gt;&#10;    &lt;description&gt;&#10;      &lt;![CDATA[Gain insight into the performance characteristics of your app.&#10;        &lt;a href=&quot;https://firebase.google.com/docs/perf-mon/?utm_source=studio&quot;&gt;More info&lt;/a&gt;]]&gt;&#10;    &lt;/description&gt;&#10;    &lt;!-- LINT.IfChange(performance_tutorial) --&gt;&#10;    &lt;tutorial&#10;        key=&quot;perf-get-started-with-perf-for-android&quot;&#10;        label=&quot;Get started with Performance Monitoring&quot;&#10;        remoteLink=&quot;https://firebase.google.com/docs/perf-mon/get-started-android?utm_source=studio&quot;&#10;        remoteLinkLabel=&quot;Launch in browser&quot;&gt;&#10;      &lt;description&gt;&#10;        &lt;![CDATA[Add Performance Monitoring to your app to collect performance data about your app's&#10;        start time, screen rendering, network requests, and more.]]&gt;&#10;      &lt;/description&gt;&#10;      &lt;step label=&quot;Connect your app to Firebase&quot;&gt;&#10;        &lt;stepElement&gt;&#10;          &lt;action&#10;              key=&quot;firebase.connect&quot;&#10;              label=&quot;Connect to Firebase&quot;&#10;              successMessage=&quot;Connected&quot;&gt;&#10;          &lt;/action&gt;&#10;        &lt;/stepElement&gt;&#10;      &lt;/step&gt;&#10;      &lt;step label=&quot;Add Performance Monitoring to your app&quot;&gt;&#10;        &lt;stepElement&gt;&#10;          &lt;action&#10;              actionArgument=&quot;firebase.perf&quot;&#10;              key=&quot;firebase.add_dependencies&quot;&#10;              label=&quot;Add Performance Monitoring to your app&quot;&#10;              successMessage=&quot;Dependencies set up correctly&quot;&gt;&#10;            &lt;recipe&gt;&#10;              &lt;dependency mavenUrl=&quot;&amp;perf-dependency;&quot;&gt;&#10;              &lt;/dependency&gt;&#10;              &lt;apply plugin=&quot;&amp;perf-plugin;&quot;&gt;&#10;              &lt;/apply&gt;&#10;              &lt;apply plugin=&quot;&amp;google-services-plugin;&quot;&gt;&#10;              &lt;/apply&gt;&#10;              &lt;classpath mavenUrl=&quot;&amp;gradle-plugin-class;&quot;&gt;&#10;              &lt;/classpath&gt;&#10;              &lt;classpath mavenUrl=&quot;&amp;google-services-plugin-class;&quot;&gt;&#10;              &lt;/classpath&gt;&#10;              &lt;classpath mavenUrl=&quot;&amp;perf-plugin-class;&quot;&gt;&#10;              &lt;/classpath&gt;&#10;            &lt;/recipe&gt;&#10;          &lt;/action&gt;&#10;        &lt;/stepElement&gt;&#10;      &lt;/step&gt;&#10;      &lt;step label=&quot;Run your app with Performance Monitoring&quot;&gt;&#10;        &lt;stepElement&gt;&#10;          &lt;section&gt;&#10;            &lt;![CDATA[Sync your project, then run your app on an emulator or real device.]]&gt;&#10;          &lt;/section&gt;&#10;        &lt;/stepElement&gt;&#10;        &lt;stepElement&gt;&#10;          &lt;section&gt;&#10;            &lt;![CDATA[Requirements for an emulator or device:]]&gt;&#10;          &lt;/section&gt;&#10;        &lt;/stepElement&gt;&#10;        &lt;stepElement&gt;&#10;          &lt;section&gt;&#10;            &lt;![CDATA[&#10;            &lt;ul&gt;&#10;              &lt;li&gt;An Android emulator with a recent image and Google Play services 15.0.0 or later&#10;              &lt;/li&gt;&#10;              &lt;li&gt;A test device with Google Play services 15.0.0 or later&#10;              &lt;/li&gt;&#10;            &lt;/ul&gt;]]&gt;&#10;          &lt;/section&gt;&#10;        &lt;/stepElement&gt;&#10;        &lt;stepElement&gt;&#10;          &lt;section&gt;&#10;            &lt;![CDATA[Performance Monitoring automatically starts collecting data for your app's&#10;            &lt;a href=&quot;https://firebase.google.com/docs/perf-mon/app-start-foreground-background-traces?platform=android&amp;utm_source=studio&quot;&gt;start time&lt;/a&gt;,&#10;            &lt;a href=&quot;https://firebase.google.com/docs/perf-mon/screen-traces?platform=android&amp;utm_source=studio&quot;&gt;screen rendering&lt;/a&gt;,&#10;            and&#10;            &lt;a href=&quot;https://firebase.devsite.corp.google.com/docs/perf-mon/network-traces?platform=android&amp;utm_source=studio&quot;&gt;network requests&lt;/a&gt;.&#10;            Note that the Performance Monitoring SDK batches events locally, then dispatches them to&#10;            Firebase periodically or after the app goes to the background. To trigger an event&#10;            dispatch, switch your app to the background after it starts.]]&gt;&#10;          &lt;/section&gt;&#10;        &lt;/stepElement&gt;&#10;      &lt;/step&gt;&#10;      &lt;step label=&quot;View performance data in the Firebase console&quot;&gt;&#10;        &lt;stepElement&gt;&#10;          &lt;section&gt;&#10;            &lt;![CDATA[Go to the&#10;            &lt;a href=&quot;https://console.firebase.google.com/project/_/performance?utm_source=studio&quot;&gt;Performance dashboard&lt;/a&gt;&#10;            of the Firebase console to view your app's performance data.]]&gt;&#10;          &lt;/section&gt;&#10;        &lt;/stepElement&gt;&#10;        &lt;stepElement&gt;&#10;          &lt;section&gt;&#10;            &lt;![CDATA[Note that performance data usually displays within 12 hours of testing your&#10;            app. If you don't see any performance data within 12 hours, try the following:]]&gt;&#10;          &lt;/section&gt;&#10;        &lt;/stepElement&gt;&#10;        &lt;stepElement&gt;&#10;          &lt;section&gt;&#10;            &lt;![CDATA[a. Check that your app is logging performance events (refer to &quot;Enable debug logging&quot;&#10;                below).]]&gt;&#10;          &lt;/section&gt;&#10;        &lt;/stepElement&gt;&#10;        &lt;stepElement&gt;&#10;          &lt;section&gt;&#10;            &lt;![CDATA[b. If your app is logging events but you're not seeing the event data in the&#10;            console, contact&#10;            &lt;a href=&quot;https://firebase.google.com/support/troubleshooter/contact?utm_source=studio&quot;&gt;Firebase Support&lt;/a&gt;.]]&gt;&#10;          &lt;/section&gt;&#10;        &lt;/stepElement&gt;&#10;      &lt;/step&gt;&#10;      &lt;step label=&quot;(Optional) Enable debug logging&quot;&gt;&#10;        &lt;stepElement&gt;&#10;          &lt;section&gt;&#10;            &lt;![CDATA[With debug logging enabled, you can check that your app is logging performance&#10;            events.]]&gt;&#10;          &lt;/section&gt;&#10;        &lt;/stepElement&gt;&#10;        &lt;stepElement&gt;&#10;          &lt;section&gt;&#10;            &lt;![CDATA[a. Enable debug logging for Performance Monitoring at build time by adding a&#10;            &lt;code&gt;&amp;lt;meta-data&amp;gt;&lt;/code&gt; element to your app's &lt;code&gt;AndroidManifest.xml&lt;/code&gt;&#10;            file, like so:]]&gt;&#10;          &lt;/section&gt;&#10;        &lt;/stepElement&gt;&#10;        &lt;stepElement&gt;&#10;          &lt;code fileType=&quot;XML&quot;&gt;&amp;lt;application&amp;gt;&#10;    &amp;lt;meta-data&#10;      android:name=&quot;firebase_performance_logcat_enabled&quot;&#10;      android:value=&quot;true&quot; /&amp;gt;&#10;&amp;lt;/application&amp;gt;&lt;/code&gt;&#10;        &lt;/stepElement&gt;&#10;        &lt;stepElement&gt;&#10;          &lt;section&gt;&#10;            &lt;![CDATA[b. View logs using logcat filtering (not applicable for screen rendering&#10;            traces). Log messages from Performance Monitoring are tagged with&#10;            &lt;code&gt;FirebasePerformance&lt;/code&gt;, and you can filter them using following command:]]&gt;&#10;          &lt;/section&gt;&#10;        &lt;/stepElement&gt;&#10;        &lt;stepElement&gt;&#10;          &lt;code fileType=&quot;PLAIN_TEXT&quot;&gt;$ adb logcat -s FirebasePerformance&lt;/code&gt;&#10;        &lt;/stepElement&gt;&#10;        &lt;stepElement&gt;&#10;          &lt;section&gt;&#10;            &lt;![CDATA[Check for the following types of logs which indicate that Performance&#10;            Monitoring is logging performance events:]]&gt;&#10;          &lt;/section&gt;&#10;        &lt;/stepElement&gt;&#10;        &lt;stepElement&gt;&#10;          &lt;section&gt;&#10;            &lt;![CDATA[&#10;            &lt;ul&gt;&#10;              &lt;li&gt;Logging trace metric: &amp;lt;trace-name&amp;gt;&#10;              &lt;/li&gt;&#10;              &lt;li&gt;Logging network request trace: &amp;lt;url&amp;gt;&#10;              &lt;/li&gt;&#10;            &lt;/ul&gt;]]&gt;&#10;          &lt;/section&gt;&#10;        &lt;/stepElement&gt;&#10;      &lt;/step&gt;&#10;      &lt;step label=&quot;Deploy your app&quot;&gt;&#10;        &lt;stepElement&gt;&#10;          &lt;section&gt;&#10;            &lt;![CDATA[After you've validated that the Firebase console is displaying performance data&#10;            from your emulator or test device, you can deploy the updated version of your app to&#10;            your users.]]&gt;&#10;          &lt;/section&gt;&#10;        &lt;/stepElement&gt;&#10;        &lt;stepElement&gt;&#10;          &lt;section&gt;&#10;            &lt;![CDATA[You can continue to monitor performance data in the&#10;            &lt;a href=&quot;https://console.firebase.google.com/project/_/performance?utm_source=studio&quot;&gt;Performance dashboard&lt;/a&gt; of the Firebase console.]]&gt;&#10;          &lt;/section&gt;&#10;        &lt;/stepElement&gt;&#10;      &lt;/step&gt;&#10;      &lt;step label=&quot;Next Steps&quot;&gt;&#10;        &lt;stepElement&gt;&#10;          &lt;section&gt;&#10;            &lt;![CDATA[&#10;              &lt;ul&gt;&#10;                &lt;li&gt;&#10;                  Visit the&#10;                  &lt;a href=&quot;https://firebase.google.com/docs/perf-mon/get-started-android?utm_source=studio&quot;&gt;complete Performance Monitoring getting started documentation&lt;/a&gt;&#10;                  to learn more about Performance Monitoring.&#10;                &lt;/li&gt;&#10;                &lt;li&gt;&#10;                  Add custom monitoring for specific app code using&#10;                  &lt;a href=&quot;https://firebase.google.com/docs/perf-mon/custom-code-traces?platform=android&amp;utm_source=studio&quot;&gt;custom code traces&lt;/a&gt;.&#10;                &lt;/li&gt;&#10;                &lt;li&gt;&#10;                  Learn about how Performance Monitoring&#10;                  &lt;a href=&quot;https://firebase.google.com/docs/perf-mon/network-traces?platform=android&amp;utm_source=studio&quot;&gt;monitors network requests&lt;/a&gt;.&#10;                &lt;/li&gt;&#10;                &lt;li&gt;&#10;                  If you're not seeing logs, check the list of&#10;                  &lt;a href=&quot;https://firebase.google.com/docs/perf-mon/get-started-android?platform=android&amp;utm_source=studio#known_issues&quot;&gt;known issues&lt;/a&gt;&#10;                  for Performance Monitoring in Android apps.&#10;                &lt;/li&gt;&#10;              &lt;/ul&gt;]]&gt;&#10;          &lt;/section&gt;&#10;        &lt;/stepElement&gt;&#10;      &lt;/step&gt;&#10;    &lt;/tutorial&gt;&#10;    &lt;!-- LINT.ThenChange(//depot/google3/third_party/devsite/firebase/en/docs/perf-mon/get-started-android.md) --&gt;&#10;  &lt;/feature&gt;&#10;  &lt;feature&#10;      icon=&quot;fb_testlab.png&quot;&#10;      name=&quot;Test Lab&quot;&#10;      resourceRoot=&quot;/firebase_testlab&quot;&#10;      serviceId=&quot;firebase.testlab&quot;&gt;&#10;    &lt;description&gt;&#10;      &lt;![CDATA[Test your apps against a wide range of physical devices hosted in Google's cloud.&#10;        &lt;a href=&quot;https://firebase.google.com/docs/test-lab/?utm_source=studio&quot;&gt;More info&lt;/a&gt;]]&gt;&#10;    &lt;/description&gt;&#10;    &lt;tutorial&#10;        key=&quot;test-lab-run-firebase-test-lab-from-android-studio&quot;&#10;        label=&quot;Run Firebase Test Lab from Android Studio&quot;&#10;        remoteLink=&quot;https://firebase.google.com/docs/test-lab/start/&quot;&#10;        remoteLinkLabel=&quot;Launch in browser&quot;&gt;&#10;      &lt;description&gt;&#10;        &lt;![CDATA[Use Test Lab to test your app across a wide variety of devices, available in the cloud. This tutorial explains how to run tests on these devices from Android Studio.]]&gt;&#10;      &lt;/description&gt;&#10;      &lt;step label=&quot;Connect your app to Firebase&quot;&gt;&#10;        &lt;stepElement&gt;&#10;          &lt;action&#10;              key=&quot;firebase.connect&quot;&#10;              label=&quot;Connect to Firebase&quot;&#10;              successMessage=&quot;Connected&quot;&gt;&#10;          &lt;/action&gt;&#10;        &lt;/stepElement&gt;&#10;      &lt;/step&gt;&#10;      &lt;step label=&quot;Write tests for your app&quot;&gt;&#10;        &lt;stepElement&gt;&#10;          &lt;section&gt;&#10;            &lt;![CDATA[Testing is a vital part of creating an app. If you haven't written app tests, see&#10;              &lt;a href=&quot;http://developer.android.com/training/testing/start/index.html?utm_source=studio&quot;&gt;Getting Started with Testing&lt;/a&gt;&#10;              .]]&gt;&#10;          &lt;/section&gt;&#10;        &lt;/stepElement&gt;&#10;      &lt;/step&gt;&#10;      &lt;step label=&quot;Enable billing&quot;&gt;&#10;        &lt;stepElement&gt;&#10;          &lt;section&gt;&#10;            &lt;![CDATA[Firebase Test Lab requires a billing account. To learn more, see&#10;              &lt;a href=&quot;https://firebase.google.com/docs/test-lab/overview?utm_source=studio#billing&quot;&gt;Test Lab billing&lt;/a&gt;&#10;              .]]&gt;&#10;          &lt;/section&gt;&#10;        &lt;/stepElement&gt;&#10;      &lt;/step&gt;&#10;      &lt;step label=&quot;Run app tests in the cloud&quot;&gt;&#10;        &lt;stepElement&gt;&#10;          &lt;section&gt;&#10;            &lt;![CDATA[&lt;ol&gt;&#10;                &lt;li&gt;&#10;                  Open the&#10;                  &lt;strong&gt;Run/Debug Configurations&lt;/strong&gt;&#10;                  window:&#10;                  &lt;strong&gt;Run &amp;gt; Edit Configurations&lt;/strong&gt;&#10;                &lt;/li&gt;&#10;                &lt;li&gt;&#10;                  Click the&#10;                  &lt;strong&gt;Add New Configuration (+)&lt;/strong&gt;&#10;                  icon and select&#10;                  &lt;strong&gt;Android Tests&lt;/strong&gt;&#10;                  to create a new test configuration.&#10;                &lt;/li&gt;&#10;                &lt;li&gt;&#10;                  In the Run/Debug Configurations dialog, enter or select the details for your test configuration.&#10;                &lt;/li&gt;&#10;                &lt;li&gt;&#10;                  From the&#10;                  &lt;strong&gt;Target&lt;/strong&gt;&#10;                  list, select&#10;                  &lt;strong&gt;Test Lab Device Matrix&lt;/strong&gt;&#10;                  .&#10;                &lt;/li&gt;&#10;                &lt;li&gt;&#10;                  In the&#10;                  &lt;strong&gt;Matrix configuration&lt;/strong&gt;&#10;                  selector, choose an existing matrix, or create a new one. A matrix consists of the devices, Android versions, locales and screen orientations that you want to test your app with. All valid combinations are used in the matrix.&#10;                &lt;/li&gt;&#10;                &lt;li&gt;&#10;                  In the&#10;                  &lt;strong&gt;Cloud project&lt;/strong&gt;&#10;                  selector, choose the Firebase or Cloud Platform project to bill for testing.&#10;                &lt;/li&gt;&#10;                &lt;li&gt;&#10;                  Click&#10;                  &lt;strong&gt;OK&lt;/strong&gt;&#10;                  to save your test configuration and exit the dialog, and then click the&#10;                  &lt;strong&gt;Run&lt;/strong&gt;&#10;                  button to run your tests.&#10;                &lt;/li&gt;&#10;              &lt;/ol&gt;]]&gt;&#10;          &lt;/section&gt;&#10;        &lt;/stepElement&gt;&#10;      &lt;/step&gt;&#10;    &lt;/tutorial&gt;&#10;    &lt;tutorial&#10;        key=&quot;test-lab-record-robo-script-and-use-it-to-guide-robo-test&quot;&#10;        label=&quot;Record Robo Script and Use it to Guide Robo Test&quot;&#10;        remoteLink=&quot;https://firebase.google.com/docs/test-lab/start/robo/&quot;&#10;        remoteLinkLabel=&quot;Launch in browser&quot;&gt;&#10;      &lt;description&gt;&#10;        &lt;![CDATA[Use Test Lab to test your app across a wide variety of devices, available in the cloud. This tutorial explains how to record a Robo script in Android Studio and use it to guide Robo test in Test Lab.]]&gt;&#10;      &lt;/description&gt;&#10;      &lt;step label=&quot;Record Robo script&quot;&gt;&#10;        &lt;stepElement&gt;&#10;          &lt;action&#10;              key=&quot;record.robo.script&quot;&#10;              label=&quot;Record Robo script&quot;&gt;&#10;          &lt;/action&gt;&#10;        &lt;/stepElement&gt;&#10;      &lt;/step&gt;&#10;      &lt;step label=&quot;Provide the recorded Robo script for a Robo test run in Test Lab&quot;&gt;&#10;        &lt;stepElement&gt;&#10;          &lt;section&gt;&#10;            &lt;![CDATA[&lt;ol&gt;&#10;                &lt;li&gt;&#10;                  Navigate to&#10;                  &lt;a href=&quot;https://firebase.google.com/docs/test-lab?utm_source=studio&quot;&gt;Firebase Test Lab&lt;/a&gt;&#10;                  .&#10;                &lt;/li&gt;&#10;                &lt;li&gt;&#10;                  Click the&#10;                  &lt;strong&gt;Run a test&lt;/strong&gt;&#10;                  button.&#10;                &lt;/li&gt;&#10;                &lt;li&gt;&#10;                  Pick a Firebase project or create a new one.&#10;                &lt;/li&gt;&#10;                &lt;li&gt;&#10;                  Click the&#10;                  &lt;strong&gt;Run a test&lt;/strong&gt;&#10;                  button and choose&#10;                  &lt;strong&gt;Run a Robo test&lt;/strong&gt;&#10;                  .&#10;                &lt;/li&gt;&#10;                &lt;li&gt;&#10;                  On the&#10;                  &lt;strong&gt;Select app&lt;/strong&gt;&#10;                  page, under&#10;                  &lt;strong&gt;Robo script (optional)&lt;/strong&gt;&#10;                  , upload the file with a Robo script. To learn more, see&#10;                  &lt;a href=&quot;https://firebase.google.com/docs/test-lab/robo-ux-test?utm_source=studio#scripting&quot;&gt;Robo test scripting&lt;/a&gt;&#10;                  .&#10;                &lt;/li&gt;&#10;              &lt;/ol&gt;]]&gt;&#10;          &lt;/section&gt;&#10;        &lt;/stepElement&gt;&#10;      &lt;/step&gt;&#10;    &lt;/tutorial&gt;&#10;  &lt;/feature&gt;&#10;  &lt;feature&#10;      icon=&quot;fb_messaging.png&quot;&#10;      name=&quot;Cloud Messaging&quot;&#10;      resourceRoot=&quot;/firebase_messaging&quot;&#10;      serviceId=&quot;firebase.messaging&quot;&gt;&#10;    &lt;description&gt;&#10;      &lt;![CDATA[Deliver and receive messages and notifications reliably across cloud and device.&#10;        &lt;a href=&quot;https://firebase.google.com/docs/cloud-messaging/?utm_source=studio&quot;&gt;More info&lt;/a&gt;]]&gt;&#10;    &lt;/description&gt;&#10;    &lt;tutorial&#10;        key=&quot;cloud-messaging-set-up-firebase-cloud-messaging-on-your-android-app&quot;&#10;        label=&quot;Set up Firebase Cloud Messaging&quot;&#10;        remoteLink=&quot;https://firebase.google.com/docs/cloud-messaging/android/start/&quot;&#10;        remoteLinkLabel=&quot;Launch in browser&quot;&gt;&#10;      &lt;description&gt;&#10;        &lt;![CDATA[Firebase Cloud Messaging lets you receive and send messages from your app to the server and other clients. This tutorial explains how to set up FCM and enable your app to receive notifications.]]&gt;&#10;      &lt;/description&gt;&#10;      &lt;step label=&quot;Connect your app to Firebase&quot;&gt;&#10;        &lt;stepElement&gt;&#10;          &lt;action&#10;              key=&quot;firebase.connect&quot;&#10;              label=&quot;Connect to Firebase&quot;&#10;              successMessage=&quot;Connected&quot;&gt;&#10;          &lt;/action&gt;&#10;        &lt;/stepElement&gt;&#10;      &lt;/step&gt;&#10;      &lt;step label=&quot;Add FCM to your app&quot;&gt;&#10;        &lt;stepElement&gt;&#10;          &lt;action&#10;              actionArgument=&quot;firebase.messaging&quot;&#10;              key=&quot;firebase.add_dependencies&quot;&#10;              label=&quot;Add FCM to your app&quot;&#10;              successMessage=&quot;Dependencies set up correctly&quot;&gt;&#10;            &lt;recipe&gt;&#10;              &lt;classpath mavenUrl=&quot;&amp;google-services-plugin-class;&quot;&gt;&#10;              &lt;/classpath&gt;&#10;              &lt;apply plugin=&quot;&amp;google-services-plugin;&quot;&gt;&#10;              &lt;/apply&gt;&#10;              &lt;dependency mavenUrl=&quot;&amp;messaging-dependency;&quot;&gt;&#10;              &lt;/dependency&gt;&#10;            &lt;/recipe&gt;&#10;          &lt;/action&gt;&#10;        &lt;/stepElement&gt;&#10;      &lt;/step&gt;&#10;      &lt;step label=&quot;Access the device registration token&quot;&gt;&#10;        &lt;stepElement&gt;&#10;          &lt;section&gt;&#10;            &lt;![CDATA[On initial startup of your app, the FCM SDK generates a registration token for the client app instance. If you want to target single devices, or create device groups, you'll need to access this token.]]&gt;&#10;          &lt;/section&gt;&#10;        &lt;/stepElement&gt;&#10;        &lt;stepElement&gt;&#10;          &lt;section&gt;&#10;            &lt;![CDATA[You can access the token's value by creating a new class which extends&#10;              &lt;code&gt;FirebaseInstanceIdService&lt;/code&gt;&#10;              . In that class, call&#10;              &lt;code&gt;getToken&lt;/code&gt;&#10;              within&#10;              &lt;code&gt;onTokenRefresh&lt;/code&gt;&#10;              , and log the value as shown:]]&gt;&#10;          &lt;/section&gt;&#10;        &lt;/stepElement&gt;&#10;        &lt;stepElement&gt;&#10;          &lt;code fileType=&quot;JAVA&quot;&gt;@Override&#10;public void onTokenRefresh() {&#10;    // Get updated InstanceID token.&#10;    String refreshedToken = FirebaseInstanceId.getInstance().getToken();&#10;    Log.d(TAG, &quot;Refreshed token: &quot; + refreshedToken);&#10;&#10;    // If you want to send messages to this application instance or&#10;    // manage this apps subscriptions on the server side, send the&#10;    // Instance ID token to your app server.&#10;    sendRegistrationToServer(refreshedToken);&#10;}&lt;/code&gt;&#10;        &lt;/stepElement&gt;&#10;        &lt;stepElement&gt;&#10;          &lt;section&gt;&#10;            &lt;![CDATA[Also add the service to your manifest file:]]&gt;&#10;          &lt;/section&gt;&#10;        &lt;/stepElement&gt;&#10;        &lt;stepElement&gt;&#10;          &lt;code fileType=&quot;XML&quot;&gt;&amp;lt;service&#10;    android:name=&quot;.MyFirebaseInstanceIDService&quot;&amp;gt;&#10;    &amp;lt;intent-filter&amp;gt;&#10;        &amp;lt;action android:name=&quot;com.google.firebase.INSTANCE_ID_EVENT&quot;/&amp;gt;&#10;    &amp;lt;/intent-filter&amp;gt;&#10;&amp;lt;/service&amp;gt;&lt;/code&gt;&#10;        &lt;/stepElement&gt;&#10;        &lt;stepElement&gt;&#10;          &lt;section&gt;&#10;            &lt;![CDATA[The&#10;              &lt;code&gt;onTokenRefresh&lt;/code&gt;&#10;              callback fires whenever a new token is generated, so calling&#10;              &lt;code&gt;getToken&lt;/code&gt;&#10;              in its context ensures that you are accessing a current, available registration token.&#10;              &lt;code&gt;FirebaseInstanceID.getToken()&lt;/code&gt;&#10;              returns null if the token has not yet been generated.]]&gt;&#10;          &lt;/section&gt;&#10;        &lt;/stepElement&gt;&#10;        &lt;stepElement&gt;&#10;          &lt;section&gt;&#10;            &lt;![CDATA[After you have obtained the token, you can send it to your app server. See the&#10;              &lt;a href=&quot;https://firebase.google.com/docs/reference/android/com/google/firebase/iid/FirebaseInstanceId?utm_source=studio&quot;&gt; Instance ID API reference&lt;/a&gt;&#10;              for full detail on the API.]]&gt;&#10;          &lt;/section&gt;&#10;        &lt;/stepElement&gt;&#10;      &lt;/step&gt;&#10;      &lt;step label=&quot;Handle messages&quot;&gt;&#10;        &lt;stepElement&gt;&#10;          &lt;section&gt;&#10;            &lt;![CDATA[If you wish to do any message handling beyond receiving notifications on apps in the background, create a new Service (&#10;              &lt;b&gt;File &amp;gt; New &amp;gt; Service &amp;gt; Service&lt;/b&gt;&#10;              ) that extends&#10;              &lt;code&gt;FirebaseMessagingService&lt;/code&gt;&#10;              . This service is necessary to receive notifications in foregrounded apps, to receive data payload, to send upstream messages, and so on.]]&gt;&#10;          &lt;/section&gt;&#10;        &lt;/stepElement&gt;&#10;        &lt;stepElement&gt;&#10;          &lt;section&gt;&#10;            &lt;![CDATA[In this service create an&#10;              &lt;code&gt;onMessageReceived&lt;/code&gt;&#10;              method to handle incoming messages.]]&gt;&#10;          &lt;/section&gt;&#10;        &lt;/stepElement&gt;&#10;        &lt;stepElement&gt;&#10;          &lt;code&gt;@Override&#10;public void onMessageReceived(RemoteMessage remoteMessage) {&#10;    // ...&#10;&#10;    // TODO(developer): Handle FCM messages here.&#10;    // Not getting messages here? See why this may be: https://goo.gl/39bRNJ&#10;    Log.d(TAG, &quot;From: &quot; + remoteMessage.getFrom());&#10;&#10;    // Check if message contains a data payload.&#10;    if (remoteMessage.getData().size() &amp;gt; 0) {&#10;        Log.d(TAG, &quot;Message data payload: &quot; + remoteMessage.getData());&#10;&#10;        if (/* Check if data needs to be processed by long running job */ true) {&#10;            // For long-running tasks (10 seconds or more) use Firebase Job Dispatcher.&#10;            scheduleJob();&#10;        } else {&#10;            // Handle message within 10 seconds&#10;            handleNow();&#10;        }&#10;&#10;    }&#10;&#10;    // Check if message contains a notification payload.&#10;    if (remoteMessage.getNotification() != null) {&#10;        Log.d(TAG, &quot;Message Notification Body: &quot; + remoteMessage.getNotification().getBody());&#10;    }&#10;&#10;    // Also if you intend on generating your own notifications as a result of a received FCM&#10;    // message, here is where that should be initiated. See sendNotification method below.&#10;}&lt;/code&gt;&#10;        &lt;/stepElement&gt;&#10;        &lt;stepElement&gt;&#10;          &lt;section&gt;&#10;            &lt;![CDATA[Declare the following in your application's manifest:]]&gt;&#10;          &lt;/section&gt;&#10;        &lt;/stepElement&gt;&#10;        &lt;stepElement&gt;&#10;          &lt;code fileType=&quot;XML&quot;&gt;&amp;lt;service&#10;    android:name=&quot;.MyFirebaseMessagingService&quot;&amp;gt;&#10;    &amp;lt;intent-filter&amp;gt;&#10;        &amp;lt;action android:name=&quot;com.google.firebase.MESSAGING_EVENT&quot;/&amp;gt;&#10;    &amp;lt;/intent-filter&amp;gt;&#10;&amp;lt;/service&amp;gt;&lt;/code&gt;&#10;        &lt;/stepElement&gt;&#10;        &lt;stepElement&gt;&#10;          &lt;section&gt;&#10;            &lt;![CDATA[If FCM is critical to the Android application's function, be sure to  set&#10;              &lt;code&gt;android:minSdkVersion=&quot;8&quot;&lt;/code&gt;&#10;              or higher in the manifest. This ensures that the Android application cannot be installed in an environment in which it could not run properly.]]&gt;&#10;          &lt;/section&gt;&#10;        &lt;/stepElement&gt;&#10;      &lt;/step&gt;&#10;      &lt;step label=&quot;Next Steps&quot;&gt;&#10;        &lt;stepElement&gt;&#10;          &lt;section&gt;&#10;            &lt;![CDATA[Once the client app is set up, you are ready to start sending downstream messages with&#10;              &lt;a&#10;                  class=&quot;gc-analytics-event&quot;&#10;                  data-action=&quot;linkClick&quot;&#10;                  data-category=&quot;console&quot;&#10;                  href=&quot;https://console.firebase.google.com/?utm_source=studio&quot;&gt;Firebase console&lt;/a&gt;&#10;              .]]&gt;&#10;          &lt;/section&gt;&#10;        &lt;/stepElement&gt;&#10;        &lt;stepElement&gt;&#10;          &lt;section&gt;&#10;            &lt;![CDATA[To add other, more advanced behavior to your app, you can declare an intent filter and implement an activity to respond to incoming messages.]]&gt;&#10;          &lt;/section&gt;&#10;        &lt;/stepElement&gt;&#10;        &lt;stepElement&gt;&#10;          &lt;section&gt;&#10;            &lt;![CDATA[&lt;ul&gt;&#10;                &lt;li&gt;&#10;                  &lt;a href=&quot;https://firebase.google.com/docs/cloud-messaging/android/topic-messaging?utm_source=studio&quot;&gt;Send topic messages&lt;/a&gt;&#10;                &lt;/li&gt;&#10;                &lt;li&gt;&#10;                  &lt;a href=&quot;https://firebase.google.com/docs/cloud-messaging/android/device-group?utm_source=studio&quot;&gt;Send to device groups&lt;/a&gt;&#10;                &lt;/li&gt;&#10;                &lt;li&gt;&#10;                  &lt;a href=&quot;https://firebase.google.com/docs/cloud-messaging/android/upstream?utm_source=studio&quot;&gt;Send upstream messages&lt;/a&gt;&#10;                &lt;/li&gt;&#10;              &lt;/ul&gt;]]&gt;&#10;          &lt;/section&gt;&#10;        &lt;/stepElement&gt;&#10;      &lt;/step&gt;&#10;    &lt;/tutorial&gt;&#10;  &lt;/feature&gt;&#10;  &lt;feature&#10;      icon=&quot;fb_config.png&quot;&#10;      name=&quot;Remote Config&quot;&#10;      resourceRoot=&quot;/firebase_config&quot;&#10;      serviceId=&quot;firebase.remote_config&quot;&gt;&#10;    &lt;description&gt;&#10;      &lt;![CDATA[Customize and experiment with app behavior using cloud-based configuration parameters.&#10;        &lt;a href=&quot;https://firebase.google.com/docs/remote-config/?utm_source=studio&quot;&gt;More info&lt;/a&gt;]]&gt;&#10;    &lt;/description&gt;&#10;    &lt;tutorial&#10;        key=&quot;remote-config-set-up-firebase-remote-config&quot;&#10;        label=&quot;Set up Firebase Remote Config&quot;&#10;        remoteLink=&quot;https://firebase.google.com/docs/remote-config/android/start/&quot;&#10;        remoteLinkLabel=&quot;Launch in browser&quot;&gt;&#10;      &lt;description&gt;&#10;        &lt;![CDATA[Set up Remote Config to change the behavior and appearance of your app without publishing an app update.]]&gt;&#10;      &lt;/description&gt;&#10;      &lt;step label=&quot;Connect your app to Firebase&quot;&gt;&#10;        &lt;stepElement&gt;&#10;          &lt;action&#10;              key=&quot;firebase.connect&quot;&#10;              label=&quot;Connect to Firebase&quot;&#10;              successMessage=&quot;Connected&quot;&gt;&#10;          &lt;/action&gt;&#10;        &lt;/stepElement&gt;&#10;      &lt;/step&gt;&#10;      &lt;step label=&quot;Add Remote Config to your app&quot;&gt;&#10;        &lt;stepElement&gt;&#10;          &lt;action&#10;              actionArgument=&quot;firebase.remote_config&quot;&#10;              key=&quot;firebase.add_dependencies&quot;&#10;              label=&quot;Add Remote Config to your app&quot;&#10;              successMessage=&quot;Dependencies set up correctly&quot;&gt;&#10;            &lt;recipe&gt;&#10;              &lt;classpath mavenUrl=&quot;&amp;google-services-plugin-class;&quot;&gt;&#10;              &lt;/classpath&gt;&#10;              &lt;apply plugin=&quot;&amp;google-services-plugin;&quot;&gt;&#10;              &lt;/apply&gt;&#10;              &lt;dependency mavenUrl=&quot;&amp;remote-config-dependency;&quot;&gt;&#10;              &lt;/dependency&gt;&#10;            &lt;/recipe&gt;&#10;          &lt;/action&gt;&#10;        &lt;/stepElement&gt;&#10;        &lt;stepElement&gt;&#10;          &lt;section&gt;&#10;            &lt;![CDATA[Create the singleton Remote Config object, as shown in the following example:]]&gt;&#10;          &lt;/section&gt;&#10;        &lt;/stepElement&gt;&#10;        &lt;stepElement&gt;&#10;          &lt;code&gt;mFirebaseRemoteConfig = FirebaseRemoteConfig.getInstance();&lt;/code&gt;&#10;        &lt;/stepElement&gt;&#10;        &lt;stepElement&gt;&#10;          &lt;section&gt;&#10;            &lt;![CDATA[This object is used to store in-app default parameter values, fetch updated parameter values from the service, and control when fetched values are made available to your app. To learn more, see&#10;              &lt;a href=&quot;https://firebase.google.com/docs/remote-config/api-overview?utm_source=studio&quot;&gt;Remote Config API Overview&lt;/a&gt;&#10;              .]]&gt;&#10;          &lt;/section&gt;&#10;        &lt;/stepElement&gt;&#10;      &lt;/step&gt;&#10;      &lt;step label=&quot;Set in-app default parameter values&quot;&gt;&#10;        &lt;stepElement&gt;&#10;          &lt;section&gt;&#10;            &lt;![CDATA[You can set in-app default parameter values in the Remote Config object, so that your app behaves as intended before it connects to the Remote Config Server, and so that default values are available if none are set in the service.]]&gt;&#10;          &lt;/section&gt;&#10;        &lt;/stepElement&gt;&#10;        &lt;stepElement&gt;&#10;          &lt;section&gt;&#10;            &lt;![CDATA[Define a set of parameter names, and default parameter values using a&#10;              &lt;code&gt;&lt;a href=&quot;http://developer.android.com/reference/java/util/Map.html?utm_source=studio&quot;&gt;Map&lt;/a&gt;&lt;/code&gt;&#10;              object or an&#10;              &lt;a href=&quot;http://developer.android.com/reference/java/util/Map.html?utm_source=studio&quot;&gt;XML resource file&lt;/a&gt;&#10;              stored in your app's&#10;              &lt;code&gt;res/xml&lt;/code&gt;&#10;              folder.]]&gt;&#10;          &lt;/section&gt;&#10;        &lt;/stepElement&gt;&#10;        &lt;stepElement&gt;&#10;          &lt;code&gt;&amp;lt;?xml version=&quot;1.0&quot; encoding=&quot;utf-8&quot;?&amp;gt;&#10;&amp;lt;!-- START xml_defaults --&amp;gt;&#10;&amp;lt;defaultsMap&amp;gt;&#10;    &amp;lt;entry&amp;gt;&#10;        &amp;lt;key&amp;gt;loading_phrase&amp;lt;/key&amp;gt;&#10;        &amp;lt;value&amp;gt;Fetching config…&amp;lt;/value&amp;gt;&#10;    &amp;lt;/entry&amp;gt;&#10;    &amp;lt;entry&amp;gt;&#10;        &amp;lt;key&amp;gt;welcome_message_caps&amp;lt;/key&amp;gt;&#10;        &amp;lt;value&amp;gt;false&amp;lt;/value&amp;gt;&#10;    &amp;lt;/entry&amp;gt;&#10;    &amp;lt;entry&amp;gt;&#10;        &amp;lt;key&amp;gt;welcome_message&amp;lt;/key&amp;gt;&#10;        &amp;lt;value&amp;gt;Welcome to my awesome app!&amp;lt;/value&amp;gt;&#10;    &amp;lt;/entry&amp;gt;&#10;&amp;lt;/defaultsMap&amp;gt;&#10;    &amp;lt;!-- END xml_defaults --&amp;gt;&lt;/code&gt;&#10;        &lt;/stepElement&gt;&#10;        &lt;stepElement&gt;&#10;          &lt;section&gt;&#10;            &lt;![CDATA[Add these values to the Remote Config object using&#10;              &lt;code&gt;&lt;a href=&quot;https://firebase.google.com/docs/reference/android/com/google/firebase/remoteconfig/FirebaseRemoteConfig.html?utm_source=studio#setDefaults(int)&quot;&gt;setDefaults()&lt;/a&gt;&lt;/code&gt;&#10;              .]]&gt;&#10;          &lt;/section&gt;&#10;        &lt;/stepElement&gt;&#10;        &lt;stepElement&gt;&#10;          &lt;code fileType=&quot;JAVA&quot;&gt;mFirebaseRemoteConfig.setDefaults(R.xml.remote_config_defaults);&lt;/code&gt;&#10;        &lt;/stepElement&gt;&#10;        &lt;stepElement&gt;&#10;          &lt;section&gt;&#10;            &lt;![CDATA[Note: At this point, your app can use in-app default parameter values. To use in-app default values, skip the next section. You can deploy your app without setting parameter values in the service, and then later set values in the service to override the default behavior and appearance of your app.]]&gt;&#10;          &lt;/section&gt;&#10;        &lt;/stepElement&gt;&#10;      &lt;/step&gt;&#10;      &lt;step label=&quot;Set parameter values in the service (as needed)&quot;&gt;&#10;        &lt;stepElement&gt;&#10;          &lt;section&gt;&#10;            &lt;![CDATA[&lt;ol&gt;&#10;                &lt;li&gt;&#10;                  In the&#10;                  &lt;a&#10;                      class=&quot;gc-analytics-event&quot;&#10;                      data-action=&quot;linkClick&quot;&#10;                      data-category=&quot;console&quot;&#10;                      href=&quot;https://console.firebase.google.com/?utm_source=studio&quot;&gt;Firebase console&lt;/a&gt;&#10;                  , open your project.&#10;                &lt;/li&gt;&#10;                &lt;li&gt;&#10;                  Select&#10;                  &lt;strong&gt;Remote Config&lt;/strong&gt;&#10;                  from the menu to view the Remote Config dashboard.&#10;                &lt;/li&gt;&#10;                &lt;li&gt;&#10;                  Define parameters with the same names as the parameters that you defined in your app. For each parameter, you can set a default value (which will eventually override the in-app default value) and you can also set conditional values. To learn more, see&#10;                  &lt;a href=&quot;https://firebase.google.com/docs/remote-config/parameters?utm_source=studio&quot;&gt;Remote Config Parameters and Conditions&lt;/a&gt;&#10;                  .&#10;                &lt;/li&gt;&#10;              &lt;/ol&gt;]]&gt;&#10;          &lt;/section&gt;&#10;        &lt;/stepElement&gt;&#10;      &lt;/step&gt;&#10;      &lt;step label=&quot;Fetch and activate values from the service&quot;&gt;&#10;        &lt;stepElement&gt;&#10;          &lt;section&gt;&#10;            &lt;![CDATA[To fetch parameter values from the Remote Config Server, call the&#10;              &lt;code&gt;&lt;a href=&quot;https://firebase.google.com/docs/reference/android/com/google/firebase/remoteconfig/FirebaseRemoteConfig.html?utm_source=studio#fetch()&quot;&gt;fetch()&lt;/a&gt;&lt;/code&gt;&#10;              method. Any values that you set on the Remote Config Server are fetched and cached in the Remote Config object.]]&gt;&#10;          &lt;/section&gt;&#10;        &lt;/stepElement&gt;&#10;        &lt;stepElement&gt;&#10;          &lt;section&gt;&#10;            &lt;![CDATA[If your fetch was successful, call the&#10;              &lt;code&gt;&lt;a href=&quot;https://firebase.google.com/docs/reference/android/com/google/firebase/remoteconfig/FirebaseRemoteConfig.html?utm_source=studio#activateFetched()&quot;&gt;activateFetched()&lt;/a&gt;&lt;/code&gt;&#10;              method to make the values available to your app.]]&gt;&#10;          &lt;/section&gt;&#10;        &lt;/stepElement&gt;&#10;        &lt;stepElement&gt;&#10;          &lt;section&gt;&#10;            &lt;![CDATA[Note: Fetching and activating values from the Remote Config Server is efficient and can be done safely and repeatedly, with a negligible impact on performance. This is true whether or not there are parameter values available on the Remote Config Server.]]&gt;&#10;          &lt;/section&gt;&#10;        &lt;/stepElement&gt;&#10;        &lt;stepElement&gt;&#10;          &lt;code fileType=&quot;JAVA&quot;&gt;// cacheExpirationSeconds is set to cacheExpiration here, indicating the next fetch request&#10;// will use fetch data from the Remote Config service, rather than cached parameter values,&#10;// if cached parameter values are more than cacheExpiration seconds old.&#10;// See Best Practices in the README for more information.&#10;mFirebaseRemoteConfig.fetch(cacheExpiration)&#10;        .addOnCompleteListener(this, new OnCompleteListener&amp;lt;Void&amp;gt;() {&#10;            @Override&#10;            public void onComplete(@NonNull Task&amp;lt;Void&amp;gt; task) {&#10;                if (task.isSuccessful()) {&#10;                    Toast.makeText(MainActivity.this, &quot;Fetch Succeeded&quot;,&#10;                            Toast.LENGTH_SHORT).show();&#10;&#10;                    // After config data is successfully fetched, it must be activated before newly fetched&#10;                    // values are returned.&#10;                    mFirebaseRemoteConfig.activateFetched();&#10;                } else {&#10;                    Toast.makeText(MainActivity.this, &quot;Fetch Failed&quot;,&#10;                            Toast.LENGTH_SHORT).show();&#10;                }&#10;                displayWelcomeMessage();&#10;            }&#10;        });&lt;/code&gt;&#10;        &lt;/stepElement&gt;&#10;        &lt;stepElement&gt;&#10;          &lt;section&gt;&#10;            &lt;![CDATA[Because these updated parameter values affect the behavior and appearance of your app, you should activate the fetched values at a time that ensures a smooth experience for your user, such as the next time that the user opens your app.]]&gt;&#10;          &lt;/section&gt;&#10;        &lt;/stepElement&gt;&#10;      &lt;/step&gt;&#10;      &lt;step label=&quot;Get parameter values to use in your app&quot;&gt;&#10;        &lt;stepElement&gt;&#10;          &lt;section&gt;&#10;            &lt;![CDATA[Now you can get parameter values from the&#10;              &lt;code&gt;&lt;a href=&quot;https://firebase.google.com/docs/reference/android/com/google/firebase/remoteconfig/FirebaseRemoteConfig?utm_source=studio&quot;&gt;FirebaseRemoteConfig&lt;/a&gt;&lt;/code&gt;&#10;              object using the various get methods.]]&gt;&#10;          &lt;/section&gt;&#10;        &lt;/stepElement&gt;&#10;        &lt;stepElement&gt;&#10;          &lt;code fileType=&quot;JAVA&quot;&gt;String welcomeMessage = mFirebaseRemoteConfig.getString(WELCOME_MESSAGE_KEY);&lt;/code&gt;&#10;        &lt;/stepElement&gt;&#10;      &lt;/step&gt;&#10;      &lt;step label=&quot;Next Steps&quot;&gt;&#10;        &lt;stepElement&gt;&#10;          &lt;section&gt;&#10;            &lt;![CDATA[Learn how to run experiments by&#10;              &lt;a href=&quot;https://firebase.google.com/docs/remote-config/config-analytics?utm_source=studio&quot;&gt;using Remote Config with Analytics&lt;/a&gt;]]&gt;&#10;          &lt;/section&gt;&#10;        &lt;/stepElement&gt;&#10;      &lt;/step&gt;&#10;    &lt;/tutorial&gt;&#10;  &lt;/feature&gt;&#10;  &lt;feature&#10;      icon=&quot;fb_dynamiclinks.png&quot;&#10;      name=&quot;Dynamic Links&quot;&#10;      resourceRoot=&quot;/firebase_dynamiclinks&quot;&#10;      serviceId=&quot;firebase.dynamiclinks&quot;&gt;&#10;    &lt;description&gt;&#10;      &lt;![CDATA[Create web URLs that can be shared to drive app&#10;        installs and to deep-link into relevant content of your app.&#10;        &lt;a href=&quot;https://firebase.google.com/docs/dynamic-links/?utm_source=studio&quot;&gt;More info&lt;/a&gt;]]&gt;&#10;    &lt;/description&gt;&#10;    &lt;!-- LINT.IfChange(dynamiclinks_tutorial) --&gt;&#10;    &lt;tutorial&#10;        key=&quot;dynamic-links-set-up-firebase-dynamic-links-for-android&quot;&#10;        label=&quot;Create dynamic links&quot;&#10;        remoteLink=&quot;https://firebase.google.com/docs/dynamic-links/android/create&quot;&#10;        remoteLinkLabel=&quot;Launch in browser&quot;&gt;&#10;      &lt;description&gt;&#10;        &lt;![CDATA[You can use Firebase Dynamic Links to give new users&#10;          of your app a personalized onboarding experience.]]&gt;&#10;      &lt;/description&gt;&#10;      &lt;step label=&quot;Connect your app to Firebase&quot;&gt;&#10;        &lt;stepElement&gt;&#10;          &lt;action&#10;              key=&quot;firebase.connect&quot;&#10;              label=&quot;Connect to Firebase&quot;&#10;              successMessage=&quot;Connected&quot;&gt;&#10;          &lt;/action&gt;&#10;        &lt;/stepElement&gt;&#10;        &lt;stepElement&gt;&#10;          &lt;section&gt;&#10;            &lt;![CDATA[Make sure that Google Analytics is enabled in&#10;              your Firebase project:]]&gt;&#10;          &lt;/section&gt;&#10;        &lt;/stepElement&gt;&#10;        &lt;stepElement&gt;&#10;          &lt;section&gt;&#10;            &lt;![CDATA[&#10;              &lt;ul&gt;&#10;                &lt;li&gt;If you're creating a new Firebase project, enable&#10;                  Google Analytics during the project creation workflow.&#10;                &lt;/li&gt;&#10;                &lt;li&gt;If you're using an existing Firebase project that&#10;                  doesn't have Google Analytics enabled, go to the&#10;                  &lt;a&#10;                      class=&quot;gc-analytics-event&quot;&#10;                      data-action=&quot;linkClick&quot;&#10;                      data-category=&quot;console&quot;&#10;                      href=&quot;https://console.firebase.google.com/project/_/settings/integrations/?utm_source=studio&quot;&gt;&lt;i&gt;Integrations&lt;/i&gt;&lt;/a&gt;&#10;                  tab of your &lt;b&gt;Project settings&lt;/b&gt; to enable it.&#10;                &lt;/li&gt;&#10;              &lt;/ul&gt;]]&gt;&#10;          &lt;/section&gt;&#10;        &lt;/stepElement&gt;&#10;      &lt;/step&gt;&#10;      &lt;step label=&quot;Add the Dynamic Links SDK to your app&quot;&gt;&#10;        &lt;stepElement&gt;&#10;          &lt;action&#10;              actionArgument=&quot;firebase.app_invites&quot;&#10;              key=&quot;firebase.add_dependencies&quot;&#10;              label=&quot;Add the Dynamic Links SDK to your app&quot;&#10;              successMessage=&quot;Dependencies set up correctly&quot;&gt;&#10;            &lt;recipe&gt;&#10;              &lt;classpath mavenUrl=&quot;&amp;google-services-plugin-class;&quot;&gt;&#10;              &lt;/classpath&gt;&#10;              &lt;apply plugin=&quot;&amp;google-services-plugin;&quot;&gt;&#10;              &lt;/apply&gt;&#10;              &lt;dependency mavenUrl=&quot;&amp;fdl-dependency;&quot;&gt;&#10;              &lt;/dependency&gt;&#10;            &lt;/recipe&gt;&#10;          &lt;/action&gt;&#10;        &lt;/stepElement&gt;&#10;      &lt;/step&gt;&#10;      &lt;step label=&quot;Complete your setup in the console&quot;&gt;&#10;        &lt;stepElement&gt;&#10;          &lt;section&gt;&#10;            &lt;![CDATA[If you haven't already, complete the following in&#10;              the Firebase console:]]&gt;&#10;          &lt;/section&gt;&#10;        &lt;/stepElement&gt;&#10;        &lt;stepElement&gt;&#10;          &lt;section&gt;&#10;            &lt;![CDATA[&#10;              &lt;ul&gt;&#10;                &lt;li&gt;In your&#10;                  &lt;a&#10;                      class=&quot;gc-analytics-event&quot;&#10;                      data-action=&quot;linkClick&quot;&#10;                      data-category=&quot;console&quot;&#10;                      href=&quot;https://console.firebase.google.com/project/_/settings/?utm_source=studio&quot;&gt;&lt;b&gt;Project settings&lt;/b&gt;&lt;/a&gt;,&#10;                  add your SHA-1 signing key to your Firebase Android&#10;                  App. If you use App Links, also specify your&#10;                  SHA-256 key.&#10;                &lt;/li&gt;&#10;                &lt;li&gt;In the&#10;                  &lt;a&#10;                      class=&quot;gc-analytics-event&quot;&#10;                      data-action=&quot;linkClick&quot;&#10;                      data-category=&quot;console&quot;&#10;                      href=&quot;https://console.firebase.google.com/project/_/durablelinks/?utm_source=studio&quot;&gt;&lt;b&gt;Dynamic Links&lt;/b&gt;&lt;/a&gt;&#10;                  section of the console:&#10;                  &lt;ul&gt;&#10;                    &lt;li&gt;Accept the terms of service for Dynamic Links.&#10;                    &lt;/li&gt;&#10;                    &lt;li&gt;Set a domain for your Dynamic Links.&#10;                    &lt;/li&gt;&#10;                  &lt;/ul&gt;&#10;                &lt;/li&gt;&#10;              &lt;/ul&gt;&#10;            ]]&gt;&#10;          &lt;/section&gt;&#10;        &lt;/stepElement&gt;&#10;      &lt;/step&gt;&#10;      &lt;step label=&quot;Create a Dynamic Link&quot;&gt;&#10;        &lt;stepElement&gt;&#10;          &lt;section&gt;&#10;            &lt;![CDATA[Create a new Dynamic Link in the&#10;              &lt;a&#10;                  class=&quot;gc-analytics-event&quot;&#10;                  data-action=&quot;linkClick&quot;&#10;                  data-category=&quot;console&quot;&#10;                  href=&quot;https://console.firebase.google.com/project/_/durablelinks/?utm_source=studio&quot;&gt;Firebase console&lt;/a&gt;&#10;              and specify the link URL that your app will handle.&#10;              Dynamic Links are cross-platform so the same link can be&#10;              used for all your users.]]&gt;&#10;          &lt;/section&gt;&#10;        &lt;/stepElement&gt;&#10;      &lt;/step&gt;&#10;      &lt;step label=&quot;Receive Dynamic Links in your app&quot;&gt;&#10;        &lt;stepElement&gt;&#10;          &lt;section&gt;&#10;            &lt;![CDATA[In&#10;              &lt;code&gt;AndroidManifest.xml&lt;/code&gt;,&#10;              add an intent filter to the activity that handles deep&#10;              links for your app.]]&gt;&#10;          &lt;/section&gt;&#10;        &lt;/stepElement&gt;&#10;        &lt;stepElement&gt;&#10;          &lt;code fileType=&quot;XML&quot;&gt;&amp;lt;intent-filter&amp;gt;&#10;    &amp;lt;action android:name=&quot;android.intent.action.VIEW&quot;/&amp;gt;&#10;    &amp;lt;category android:name=&quot;android.intent.category.DEFAULT&quot;/&amp;gt;&#10;    &amp;lt;category android:name=&quot;android.intent.category.BROWSABLE&quot;/&amp;gt;&#10;    &amp;lt;data&#10;        android:host=&quot;example.com&quot;&#10;        android:scheme=&quot;https&quot;/&amp;gt;&#10;&amp;lt;/intent-filter&amp;gt;&lt;/code&gt;&#10;        &lt;/stepElement&gt;&#10;        &lt;stepElement&gt;&#10;          &lt;section&gt;&#10;            &lt;![CDATA[In this activity, call the&#10;              &lt;a href=&quot;https://firebase.google.com/docs/reference/android/com/google/firebase/dynamiclinks/FirebaseDynamicLinks.html?utm_source=studio#getDynamicLink(android.net.Uri)?utm_source=studio&quot;&gt;getDynamicLink()&lt;/a&gt;&#10;              method to parse the deep link and either automatically&#10;              launch it or use the metadata.]]&gt;&#10;          &lt;/section&gt;&#10;        &lt;/stepElement&gt;&#10;        &lt;stepElement&gt;&#10;          &lt;code fileType=&quot;JAVA&quot;&gt;@Override&#10;protected void onCreate(Bundle savedInstanceState) {&#10;    // ...&#10;&#10;    FirebaseDynamicLinks.getInstance()&#10;            .getDynamicLink(getIntent())&#10;            .addOnSuccessListener(this, new OnSuccessListener&amp;lt;PendingDynamicLinkData&amp;gt;() {&#10;                @Override&#10;                public void onSuccess(PendingDynamicLinkData pendingDynamicLinkData) {&#10;                    // Get deep link from result (may be null if no link is found)&#10;                    Uri deepLink = null;&#10;                    if (pendingDynamicLinkData != null) {&#10;                        deepLink = pendingDynamicLinkData.getLink();&#10;                    }&#10;&#10;&#10;                    // Handle the deep link. For example, open the linked content,&#10;                    // or apply promotional credit to the user's account.&#10;                    // ...&#10;&#10;                    // ...&#10;                }&#10;            })&#10;            .addOnFailureListener(this, new OnFailureListener() {&#10;                @Override&#10;                public void onFailure(@NonNull Exception e) {&#10;                    Log.w(TAG, &quot;getDynamicLink:onFailure&quot;, e);&#10;                }&#10;            });&#10;}&lt;/code&gt;&#10;        &lt;/stepElement&gt;&#10;      &lt;/step&gt;&#10;      &lt;step label=&quot;Next Steps&quot;&gt;&#10;        &lt;stepElement&gt;&#10;          &lt;section&gt;&#10;            &lt;![CDATA[&lt;ul&gt;&#10;                &lt;li&gt;&#10;                  In the Run/Debug Configuration dialog of the&#10;                  console, launch the URL to make sure your app is&#10;                  handling it correctly.&#10;                &lt;/li&gt;&#10;                &lt;li&gt;&#10;                  Learn how to&#10;                  &lt;a href=&quot;https://firebase.google.com/docs/dynamic-links/android/create#create-a-dynamic-link-from-parameters?utm_source=studio&quot;&gt;programmatically create Dynamic Links&lt;/a&gt;.&#10;                &lt;/li&gt;&#10;                &lt;li&gt;Handle Dynamic Links using&#10;                  &lt;a href=&quot;https://firebase.google.com/docs/dynamic-links/android/receive#app_links?utm_source=studio&quot;&gt;App Links&lt;/a&gt;.&#10;                &lt;/li&gt;&#10;              &lt;/ul&gt;]]&gt;&#10;          &lt;/section&gt;&#10;        &lt;/stepElement&gt;&#10;      &lt;/step&gt;&#10;    &lt;/tutorial&gt;&#10;    &lt;!-- LINT.ThenChange(//depot/google3/third_party/devsite/firebase/en/docs/dynamic-links/android/create.html) --&gt;&#10;    &lt;!-- LINT.ThenChange(//depot/google3/third_party/devsite/firebase/en/docs/dynamic-links/android/receive.html) --&gt;&#10;  &lt;/feature&gt;&#10;  &lt;feature&#10;      icon=&quot;fb_indexing.png&quot;&#10;      name=&quot;App Indexing&quot;&#10;      resourceRoot=&quot;/firebase_appindexing&quot;&#10;      serviceId=&quot;firebase.app_indexing&quot;&gt;&#10;    &lt;description&gt;&#10;      &lt;![CDATA[Get your app content into Google Search.&#10;        &lt;a href=&quot;https://firebase.google.com/docs/app-indexing/?utm_source=studio&quot;&gt;More info&lt;/a&gt;]]&gt;&#10;    &lt;/description&gt;&#10;    &lt;tutorial&#10;        key=&quot;app-indexing-set-up-app-indexing-for-your-project&quot;&#10;        label=&quot;Get Started with App Indexing&quot;&#10;        remoteLink=&quot;https://firebase.google.com/docs/app-indexing/android/start/&quot;&#10;        remoteLinkLabel=&quot;Launch in browser&quot;&gt;&#10;      &lt;description&gt;&#10;        &lt;![CDATA[Follow this workflow to set up your project with App Indexing. Once you deploy your App, your app's users can seamlessly re-engage with your app from Google Search activities.]]&gt;&#10;      &lt;/description&gt;&#10;      &lt;step label=&quot;Connect your app to Firebase&quot;&gt;&#10;        &lt;stepElement&gt;&#10;          &lt;action&#10;              key=&quot;firebase.connect&quot;&#10;              label=&quot;Connect to Firebase&quot;&#10;              successMessage=&quot;Connected&quot;&gt;&#10;          &lt;/action&gt;&#10;        &lt;/stepElement&gt;&#10;      &lt;/step&gt;&#10;      &lt;step label=&quot;Add App Indexing library to your app&quot;&gt;&#10;        &lt;stepElement&gt;&#10;          &lt;action&#10;              actionArgument=&quot;firebase.appindexing&quot;&#10;              key=&quot;firebase.add_dependencies&quot;&#10;              label=&quot;Add App Indexing library to your app&quot;&#10;              successMessage=&quot;Dependencies set up correctly&quot;&gt;&#10;            &lt;recipe&gt;&#10;              &lt;classpath mavenUrl=&quot;&amp;google-services-plugin-class;&quot;&gt;&#10;              &lt;/classpath&gt;&#10;              &lt;apply plugin=&quot;&amp;google-services-plugin;&quot;&gt;&#10;              &lt;/apply&gt;&#10;              &lt;dependency mavenUrl=&quot;&amp;appindexing-dependency;&quot;&gt;&#10;              &lt;/dependency&gt;&#10;            &lt;/recipe&gt;&#10;          &lt;/action&gt;&#10;        &lt;/stepElement&gt;&#10;      &lt;/step&gt;&#10;      &lt;step label=&quot;Support links to your app content&quot;&gt;&#10;        &lt;stepElement&gt;&#10;          &lt;section&gt;&#10;            &lt;![CDATA[Now that you&amp;#8217;ve added Firebase and the App Indexing library to your app, generate intent filters for HTTP URL.]]&gt;&#10;          &lt;/section&gt;&#10;        &lt;/stepElement&gt;&#10;        &lt;stepElement&gt;&#10;          &lt;action&#10;              key=&quot;url_assistant.url_mapper&quot;&#10;              label=&quot;Add links to your app&quot;&#10;              successMessage=&quot;&quot;&gt;&#10;          &lt;/action&gt;&#10;        &lt;/stepElement&gt;&#10;        &lt;stepElement&gt;&#10;          &lt;section&gt;&#10;            &lt;![CDATA[Then add logic to handle opening URL in your app.]]&gt;&#10;          &lt;/section&gt;&#10;        &lt;/stepElement&gt;&#10;        &lt;stepElement&gt;&#10;          &lt;action&#10;              key=&quot;url_assistant.insert_app_link_handling_code&quot;&#10;              label=&quot;Insert sample code to handle URL&quot;&#10;              successMessage=&quot;&quot;&gt;&#10;          &lt;/action&gt;&#10;        &lt;/stepElement&gt;&#10;        &lt;stepElement&gt;&#10;          &lt;section&gt;&#10;            &lt;![CDATA[Now your app can handle your HTTP URL.]]&gt;&#10;          &lt;/section&gt;&#10;        &lt;/stepElement&gt;&#10;      &lt;/step&gt;&#10;      &lt;step label=&quot;Enable public content indexing&quot;&gt;&#10;        &lt;stepElement&gt;&#10;          &lt;section&gt;&#10;            &lt;![CDATA[Associate your site with your app using&#10;              &lt;a href=&quot;https://developers.google.com/digital-asset-links/v1/getting-started?utm_source=studio&quot;&gt;Digital Asset Links&lt;/a&gt;&#10;              and build your app against&#10;              &lt;a href=&quot;https://developer.android.com/guide/topics/manifest/uses-sdk-element.html?utm_source=studio#ApiLevels&quot;&gt;API level 23&lt;/a&gt;&#10;              or higher for the Android platform. If you don&amp;#8217;t use HTTPS or are building against anything below API level 23,&#10;              &lt;a href=&quot;https://support.google.com/webmasters/answer/6178088?utm_source=studio&quot;&gt;use the Google Search Console&lt;/a&gt;&#10;              to associate your site with your app.]]&gt;&#10;          &lt;/section&gt;&#10;        &lt;/stepElement&gt;&#10;        &lt;stepElement&gt;&#10;          &lt;action&#10;              key=&quot;url_assistant.dal_generator&quot;&#10;              label=&quot;Associate your website and app&quot;&#10;              successMessage=&quot;&quot;&gt;&#10;          &lt;/action&gt;&#10;        &lt;/stepElement&gt;&#10;        &lt;stepElement&gt;&#10;          &lt;section&gt;&#10;            &lt;![CDATA[After Google indexes your public app content, your users will be able to find it in the search results.]]&gt;&#10;          &lt;/section&gt;&#10;        &lt;/stepElement&gt;&#10;      &lt;/step&gt;&#10;      &lt;step label=&quot;Enable personal content indexing&quot;&gt;&#10;        &lt;stepElement&gt;&#10;          &lt;section&gt;&#10;            &lt;![CDATA[Create a class that extends&#10;              &lt;a href=&quot;https://developer.android.com/reference/android/app/IntentService.html?utm_source=studio&quot;&gt;IntentService&lt;/a&gt;&#10;              and then add, update, or remove personal content from the on-device index. See our&#10;              &lt;a href=&quot;https://firebase.google.com/docs/app-indexing/android/personal-content?utm_source=studio#update-the-index&quot;&gt;code samples&lt;/a&gt;&#10;              .]]&gt;&#10;          &lt;/section&gt;&#10;        &lt;/stepElement&gt;&#10;        &lt;stepElement&gt;&#10;          &lt;section&gt;&#10;            &lt;![CDATA[After Google indexes your personal app content, your users will be able to find their personal content in the&#10;              &lt;a href=&quot;https://support.google.com/websearch/answer/7080164?utm_source=studio&quot;&gt;search results&lt;/a&gt;&#10;              .]]&gt;&#10;          &lt;/section&gt;&#10;        &lt;/stepElement&gt;&#10;      &lt;/step&gt;&#10;      &lt;step label=&quot;Log user actions&quot;&gt;&#10;        &lt;stepElement&gt;&#10;          &lt;section&gt;&#10;            &lt;![CDATA[Build the&#10;              &lt;a href=&quot;https://firebase.google.com/docs/reference/android/com/google/firebase/appindexing/Action?utm_source=studio&quot;&gt;Action&lt;/a&gt;&#10;              object with the title and URL of the content and the&#10;              &lt;a href=&quot;https://firebase.google.com/docs/reference/android/com/google/firebase/appindexing/Action.Builder?utm_source=studio#constant-summary&quot;&gt;Action type&lt;/a&gt;&#10;              . Then call both the&#10;              &lt;a href=&quot;https://firebase.google.com/docs/reference/android/com/google/firebase/appindexing/FirebaseUserActions.html?utm_source=studio#start(com.google.firebase.appindexing.Action)&quot;&gt;start()&lt;/a&gt;&#10;              and&#10;              &lt;a href=&quot;https://firebase.google.com/docs/reference/android/com/google/firebase/appindexing/FirebaseUserActions.html?utm_source=studio#end(com.google.firebase.appindexing.Action)&quot;&gt;end()&lt;/a&gt;&#10;              methods to log the action.]]&gt;&#10;          &lt;/section&gt;&#10;        &lt;/stepElement&gt;&#10;        &lt;stepElement&gt;&#10;          &lt;action&#10;              key=&quot;firebase_app_indexing.insert_app_indexing_api_code&quot;&#10;              label=&quot;Insert code to log user actions&quot;&#10;              successMessage=&quot;&quot;&gt;&#10;          &lt;/action&gt;&#10;        &lt;/stepElement&gt;&#10;        &lt;stepElement&gt;&#10;          &lt;section&gt;&#10;            &lt;![CDATA[Now Google Search can take into account the actions your users take on public and personal app content to provide improved ranking for your search results and suggestions.]]&gt;&#10;          &lt;/section&gt;&#10;        &lt;/stepElement&gt;&#10;      &lt;/step&gt;&#10;    &lt;/tutorial&gt;&#10;    &lt;tutorial&#10;        key=&quot;app-indexing-test-app-indexing-for-android&quot;&#10;        label=&quot;Test App Indexing&quot;&#10;        remoteLink=&quot;https://firebase.google.com/docs/app-indexing/android/start/test/&quot;&#10;        remoteLinkLabel=&quot;Launch in browser&quot;&gt;&#10;      &lt;description&gt;&#10;        &lt;![CDATA[This tutorial let you test whether your app has integrated correctly with App Indexing, so that Google Search can index your app.]]&gt;&#10;      &lt;/description&gt;&#10;      &lt;step label=&quot;Test your URLs&quot;&gt;&#10;        &lt;stepElement&gt;&#10;          &lt;section&gt;&#10;            &lt;![CDATA[Use the App Links Assistant URL testing tool to verify that your URLs are set up correctly.]]&gt;&#10;          &lt;/section&gt;&#10;        &lt;/stepElement&gt;&#10;        &lt;stepElement&gt;&#10;          &lt;action&#10;              key=&quot;url_assistant.launch_app_via_app_link&quot;&#10;              label=&quot;Open URL testing tool&quot;&#10;              successMessage=&quot;&quot;&gt;&#10;          &lt;/action&gt;&#10;        &lt;/stepElement&gt;&#10;      &lt;/step&gt;&#10;      &lt;step label=&quot;Test public content indexing&quot;&gt;&#10;        &lt;stepElement&gt;&#10;          &lt;section&gt;&#10;            &lt;![CDATA[Use the Search preview tool to verify that your URLs are showing up in Google Search results.]]&gt;&#10;          &lt;/section&gt;&#10;        &lt;/stepElement&gt;&#10;        &lt;stepElement&gt;&#10;          &lt;action&#10;              key=&quot;firebase_app_indexing.show_app_indexing_preview_dialog&quot;&#10;              label=&quot;Preview Search results&quot;&#10;              successMessage=&quot;&quot;&gt;&#10;          &lt;/action&gt;&#10;        &lt;/stepElement&gt;&#10;      &lt;/step&gt;&#10;      &lt;step label=&quot;Test personal content indexing&quot;&gt;&#10;        &lt;stepElement&gt;&#10;          &lt;section&gt;&#10;            &lt;![CDATA[To validate the&#10;              &lt;b&gt;Indexable&lt;/b&gt;&#10;              objects your app is adding to the on-device index, go to&#10;              &lt;b&gt;In Apps&lt;/b&gt;&#10;              in the Google app on your device and search for a personal content item. To show any errors in your&#10;              &lt;b&gt;latest released apk version&lt;/b&gt;&#10;              , click&#10;              &lt;b&gt;Check for errors&lt;/b&gt;&#10;              below.]]&gt;&#10;          &lt;/section&gt;&#10;        &lt;/stepElement&gt;&#10;        &lt;stepElement&gt;&#10;          &lt;action&#10;              key=&quot;firebase_app_indexing.check_personal_content_indexing_errors&quot;&#10;              label=&quot;Check for errors&quot;&#10;              successMessage=&quot;&quot;&gt;&#10;          &lt;/action&gt;&#10;        &lt;/stepElement&gt;&#10;      &lt;/step&gt;&#10;      &lt;step label=&quot;Test user action logging&quot;&gt;&#10;        &lt;stepElement&gt;&#10;          &lt;section&gt;&#10;            &lt;![CDATA[Use the Android Debug Bridge or the Android Monitor to verify the data sent in your App Indexing API calls. Learn more in our&#10;              &lt;a href=&quot;https://firebase.google.com/docs/app-indexing/android/test?utm_source=studio#test-user-action-logging&quot;&gt;App Indexing testing documentation&lt;/a&gt;&#10;              . To show any errors in your&#10;              &lt;b&gt;latest released apk version&lt;/b&gt;&#10;              , click&#10;              &lt;b&gt;Check for errors&lt;/b&gt;&#10;              below.]]&gt;&#10;          &lt;/section&gt;&#10;        &lt;/stepElement&gt;&#10;        &lt;stepElement&gt;&#10;          &lt;action&#10;              key=&quot;firebase_app_indexing.check_user_action_logging_errors&quot;&#10;              label=&quot;Check for errors&quot;&#10;              successMessage=&quot;&quot;&gt;&#10;          &lt;/action&gt;&#10;        &lt;/stepElement&gt;&#10;      &lt;/step&gt;&#10;      &lt;step label=&quot;Test autocompletions&quot;&gt;&#10;        &lt;stepElement&gt;&#10;          &lt;section&gt;&#10;            &lt;![CDATA[Start with a new build of your app and visit a few pages that call the API. Then, visit the Google app on the device and type in a query that is relevant to your app. You should see query results that show your app icon and lead to those pages on your app.]]&gt;&#10;          &lt;/section&gt;&#10;        &lt;/stepElement&gt;&#10;      &lt;/step&gt;&#10;    &lt;/tutorial&gt;&#10;  &lt;/feature&gt;&#10;  &lt;feature&#10;      icon=&quot;fb_admob.png&quot;&#10;      name=&quot;Admob&quot;&#10;      resourceRoot=&quot;/firebase_admob&quot;&#10;      serviceId=&quot;firebase.admob&quot;&gt;&#10;    &lt;description&gt;&#10;      &lt;![CDATA[Earn more from your apps the smart way by showing ads from millions of Google advertisers.&#10;        &lt;a href=&quot;https://firebase.google.com/docs/admob/?utm_source=studio&quot;&gt;More info&lt;/a&gt;]]&gt;&#10;    &lt;/description&gt;&#10;    &lt;tutorial&#10;        key=&quot;admob-set-up-admob-for-android&quot;&#10;        label=&quot;Add a banner ad to your app&quot;&#10;        remoteLink=&quot;https://firebase.google.com/docs/admob/android/start/&quot;&#10;        remoteLinkLabel=&quot;Launch in browser&quot;&gt;&#10;      &lt;description&gt;&#10;        &lt;![CDATA[AdMob by Google lets you monetize your app while maintaining a great user experience. This tutorial explains how to add a test banner ad to your app.]]&gt;&#10;      &lt;/description&gt;&#10;      &lt;step label=&quot;Connect your app to Firebase&quot;&gt;&#10;        &lt;stepElement&gt;&#10;          &lt;action&#10;              key=&quot;firebase.connect&quot;&#10;              label=&quot;Connect to Firebase&quot;&#10;              successMessage=&quot;Connected&quot;&gt;&#10;          &lt;/action&gt;&#10;        &lt;/stepElement&gt;&#10;      &lt;/step&gt;&#10;      &lt;step label=&quot;Add AdMob to your app&quot;&gt;&#10;        &lt;stepElement&gt;&#10;          &lt;action&#10;              actionArgument=&quot;firebase.admob&quot;&#10;              key=&quot;firebase.add_dependencies&quot;&#10;              label=&quot;Add AdMob to your app&quot;&#10;              successMessage=&quot;Dependencies set up correctly&quot;&gt;&#10;            &lt;recipe&gt;&#10;              &lt;classpath mavenUrl=&quot;&amp;google-services-plugin-class;&quot;&gt;&#10;              &lt;/classpath&gt;&#10;              &lt;apply plugin=&quot;&amp;google-services-plugin;&quot;&gt;&#10;              &lt;/apply&gt;&#10;              &lt;dependency mavenUrl=&quot;&amp;ads-dependency;&quot;&gt;&#10;              &lt;/dependency&gt;&#10;            &lt;/recipe&gt;&#10;          &lt;/action&gt;&#10;        &lt;/stepElement&gt;&#10;      &lt;/step&gt;&#10;      &lt;step label=&quot;Add a banner ad to your layout file&quot;&gt;&#10;        &lt;stepElement&gt;&#10;          &lt;section&gt;&#10;            &lt;![CDATA[To put a banner ad in your app, add the following code to your layout file, including the Android Ads schema.]]&gt;&#10;          &lt;/section&gt;&#10;        &lt;/stepElement&gt;&#10;        &lt;stepElement&gt;&#10;          &lt;code fileType=&quot;XML&quot;&gt;&#10;&amp;lt;RelativeLayout&#10;    xmlns:ads=&quot;http://schemas.android.com/apk/res-auto&quot;&#10;    ...&#10;    &amp;gt;&#10;&#10;    &amp;lt;com.google.android.gms.ads.AdView&#10;        android:id=&quot;@+id/adView&quot;&#10;        android:layout_width=&quot;wrap_content&quot;&#10;        android:layout_height=&quot;wrap_content&quot;&#10;        android:layout_centerHorizontal=&quot;true&quot;&#10;        android:layout_alignParentBottom=&quot;true&quot;&#10;        ads:adSize=&quot;BANNER&quot;&#10;        ads:adUnitId=&quot;@string/banner_ad_unit_id&quot;&amp;gt;&#10;    &amp;lt;/com.google.android.gms.ads.AdView&amp;gt;&#10;&#10;&amp;lt;/RelativeLayout&amp;gt;&lt;/code&gt;&#10;        &lt;/stepElement&gt;&#10;      &lt;/step&gt;&#10;      &lt;step label=&quot;Load the ad in the activity&quot;&gt;&#10;        &lt;stepElement&gt;&#10;          &lt;section&gt;&#10;            &lt;![CDATA[Add code to the&#10;              &lt;code&gt;onCreate()&lt;/code&gt;&#10;              class of this activity to load the ad.]]&gt;&#10;          &lt;/section&gt;&#10;        &lt;/stepElement&gt;&#10;        &lt;stepElement&gt;&#10;          &lt;code&gt;import com.google.android.gms.ads.AdRequest;&#10;import com.google.android.gms.ads.AdView;&#10;// ...&#10;&#10;public class MainActivity extends AppCompatActivity {&#10;&#10;    private static final String TAG = &quot;MainActivity&quot;;&#10;&#10;    private AdView mAdView;&#10;    // ...&#10;&#10;    @Override&#10;    protected void onCreate(Bundle savedInstanceState) {&#10;        super.onCreate(savedInstanceState);&#10;        setContentView(R.layout.activity_main);&#10;&#10;        mAdView = findViewById(R.id.adView);&#10;        AdRequest adRequest = new AdRequest.Builder().build();&#10;        mAdView.loadAd(adRequest);&lt;/code&gt;&#10;        &lt;/stepElement&gt;&#10;      &lt;/step&gt;&#10;      &lt;step label=&quot;Add your Ad Unit ID&quot;&gt;&#10;        &lt;stepElement&gt;&#10;          &lt;section&gt;&#10;            &lt;![CDATA[Store your Ad Unit ID in your&#10;              &lt;code&gt;strings.xml&lt;/code&gt;&#10;              file. The ID below is just for testing, make sure to change it before you publish your app.]]&gt;&#10;          &lt;/section&gt;&#10;        &lt;/stepElement&gt;&#10;        &lt;stepElement&gt;&#10;          &lt;code fileType=&quot;XML&quot;&gt;&#10;&amp;lt;?xml version=&quot;1.0&quot; encoding=&quot;utf-8&quot;?&amp;gt;&#10;&amp;lt;resources&amp;gt;&#10;    ...&#10;    &amp;lt;string name=&quot;banner_ad_unit_id&quot;&amp;gt;ca-app-pub-3940256099942544/6300978111&amp;lt;/string&amp;gt;&#10;&amp;lt;/resources&amp;gt;&lt;/code&gt;&#10;        &lt;/stepElement&gt;&#10;      &lt;/step&gt;&#10;    &lt;/tutorial&gt;&#10;  &lt;/feature&gt;&#10;  &lt;feature&#10;      icon=&quot;fb_functions.png&quot;&#10;      name=&quot;Cloud Functions for Firebase&quot;&#10;      resourceRoot=&quot;/firebase_functions&quot;&#10;      serviceId=&quot;firebase.functions&quot;&gt;&#10;    &lt;description&gt;&#10;      &lt;![CDATA[Cloud Functions for Firebase lets you automatically run backend code in response to events triggered by Firebase features and HTTPS requests.&#10;        &lt;a href=&quot;https://firebase.google.com/docs/functions/?utm_source=studio&quot;&gt;More info&lt;/a&gt;]]&gt;&#10;    &lt;/description&gt;&#10;    &lt;tutorial&#10;        key=&quot;cloud-functions-for-firestore-set-up-functions-for-android&quot;&#10;        label=&quot;Set up functions and trigger a function.&quot;&#10;        remoteLink=&quot;https://firebase.google.com/docs/functions/android/start/&quot;&#10;        remoteLinkLabel=&quot;Launch in browser&quot;&gt;&#10;      &lt;description&gt;&#10;        &lt;![CDATA[functions lets you automatically run backend code in response to events triggered by Firebase features and HTTPS requests.]]&gt;&#10;      &lt;/description&gt;&#10;      &lt;step label=&quot;Connect your app to Firebase&quot;&gt;&#10;        &lt;stepElement&gt;&#10;          &lt;action&#10;              key=&quot;firebase.connect&quot;&#10;              label=&quot;Connect to Firebase&quot;&#10;              successMessage=&quot;Connected&quot;&gt;&#10;          &lt;/action&gt;&#10;        &lt;/stepElement&gt;&#10;      &lt;/step&gt;&#10;      &lt;step label=&quot;Add functions to your app&quot;&gt;&#10;        &lt;stepElement&gt;&#10;          &lt;action&#10;              actionArgument=&quot;firebase.functions&quot;&#10;              key=&quot;firebase.add_dependencies&quot;&#10;              label=&quot;Add functions to your app&quot;&#10;              successMessage=&quot;Dependencies set up correctly&quot;&gt;&#10;            &lt;recipe&gt;&#10;              &lt;classpath mavenUrl=&quot;&amp;google-services-plugin-class;&quot;&gt;&#10;              &lt;/classpath&gt;&#10;              &lt;apply plugin=&quot;&amp;google-services-plugin;&quot;&gt;&#10;              &lt;/apply&gt;&#10;              &lt;dependency mavenUrl=&quot;&amp;functions-dependency;&quot;&gt;&#10;              &lt;/dependency&gt;&#10;            &lt;/recipe&gt;&#10;          &lt;/action&gt;&#10;        &lt;/stepElement&gt;&#10;      &lt;/step&gt;&#10;      &lt;step label=&quot;Initialize the client SDK&quot;&gt;&#10;        &lt;stepElement&gt;&#10;          &lt;section&gt;&#10;            &lt;![CDATA[Initialize an instance of functions]]&gt;&#10;          &lt;/section&gt;&#10;        &lt;/stepElement&gt;&#10;        &lt;stepElement&gt;&#10;          &lt;code fileType=&quot;JAVA&quot;&gt;private FirebaseFunctions mFunctions;&#10;// ...&#10;mFunctions = FirebaseFunctions.getInstance();&lt;/code&gt;&#10;        &lt;/stepElement&gt;&#10;        &lt;stepElement&gt;&#10;          &lt;section&gt;&#10;            &lt;![CDATA[Note: To call a function running in any&#10;              &lt;a href=&quot;https://firebase.google.com/docs/functions/locations?utm_source=studio&quot;&gt;location&lt;/a&gt;&#10;              other than the default us-central1, you must set the appropriate value at initialization.]]&gt;&#10;          &lt;/section&gt;&#10;        &lt;/stepElement&gt;&#10;      &lt;/step&gt;&#10;      &lt;step label=&quot;Call the function&quot;&gt;&#10;        &lt;stepElement&gt;&#10;          &lt;code fileType=&quot;JAVA&quot;&gt;&#10;private Task&amp;lt;String&amp;gt; addMessage(String text) {&#10;    // Create the arguments to the callable function.&#10;    Map&amp;lt;String, Object&amp;gt; data = new HashMap&amp;lt;&amp;gt;();&#10;    data.put(&quot;text&quot;, text);&#10;    data.put(&quot;push&quot;, true);&#10;&#10;    return mFunctions&#10;            .getHttpsCallable(&quot;addMessage&quot;)&#10;            .call(data)&#10;            .continueWith(new Continuation&amp;lt;HttpsCallableResult, String&amp;gt;() {&#10;                @Override&#10;                public String then(@NonNull Task&amp;lt;HttpsCallableResult&amp;gt; task) throws Exception {&#10;                    // This continuation runs on either success or failure, but if the task&#10;                    // has failed then getResult() will throw an Exception which will be&#10;                    // propagated down.&#10;                    String result = (String) task.getResult().getData();&#10;                    return result;&#10;                }&#10;            });&#10;}&lt;/code&gt;&#10;        &lt;/stepElement&gt;&#10;      &lt;/step&gt;&#10;      &lt;step label=&quot;Handle errors on the client&quot;&gt;&#10;        &lt;stepElement&gt;&#10;          &lt;section&gt;&#10;            &lt;![CDATA[The client receives an error if the server threw an error or if the resulting promise was rejected.]]&gt;&#10;          &lt;/section&gt;&#10;        &lt;/stepElement&gt;&#10;        &lt;stepElement&gt;&#10;          &lt;section&gt;&#10;            &lt;![CDATA[If the error returned by the function is of type&#10;              &lt;code&gt;function.https.HttpsError&lt;/code&gt;&#10;              , then the client receives the error&#10;              &lt;code&gt;code&lt;/code&gt;&#10;              ,&#10;              &lt;code&gt;message&lt;/code&gt;&#10;              , and&#10;              &lt;code&gt;details&lt;/code&gt;&#10;              from the server error. Otherwise, the error contains the message&#10;              &lt;code&gt;INTERNAL&lt;/code&gt;&#10;              and the code&#10;              &lt;code&gt;INTERNAL&lt;/code&gt;&#10;              . See guidance for how to&#10;              &lt;a href=&quot;https://firebase.google.com/docs/functions/callable?utm_source=studio#handle_errors&quot;&gt;handle errors&lt;/a&gt;&#10;              in your callable function.]]&gt;&#10;          &lt;/section&gt;&#10;        &lt;/stepElement&gt;&#10;        &lt;stepElement&gt;&#10;          &lt;code fileType=&quot;JAVA&quot;&gt;&#10;addMessage(inputMessage)&#10;    .addOnCompleteListener(new OnCompleteListener&amp;lt;String&amp;gt;() {&#10;        @Override&#10;        public void onComplete(@NonNull Task&amp;lt;String&amp;gt; task) {&#10;            if (!task.isSuccessful()) {&#10;                Exception e = task.getException();&#10;                if (e instanceof FirebaseFunctionsException) {&#10;                    FirebaseFunctionsException ffe = (FirebaseFunctionsException) e;&#10;                    FirebaseFunctionsException.Code code = ffe.getCode();&#10;                    Object details = ffe.getDetails();&#10;                }&#10;                // ...&#10;            }&#10;            // ...&#10;        }&#10;    });&lt;/code&gt;&#10;        &lt;/stepElement&gt;&#10;      &lt;/step&gt;&#10;    &lt;/tutorial&gt;&#10;  &lt;/feature&gt;&#10;  &lt;feature&#10;      icon=&quot;fb_iam.png&quot;&#10;      name=&quot;In-App Messaging&quot;&#10;      resourceRoot=&quot;/firebase_iam&quot;&#10;      serviceId=&quot;firebase.iam&quot;&gt;&#10;    &lt;description&gt;&#10;      &lt;![CDATA[Firebase In-App Messaging helps you engage your app's active users by sending them targeted, contextual messages that encourage them to use key app features.&#10;        &lt;a href=&quot;https://firebase.google.com/docs/in-app-messaging/?utm_source=studio&quot;&gt;More info&lt;/a&gt;]]&gt;&#10;    &lt;/description&gt;&#10;    &lt;tutorial&#10;        key=&quot;in-app-messaging-set-up-firebase-in-app-messaging-for-android&quot;&#10;        label=&quot;Set up Firebase In-App Messaging and send your first message&quot;&#10;        remoteLink=&quot;https://firebase.google.com/docs/in-app-messaging/android/start/&quot;&#10;        remoteLinkLabel=&quot;Launch in browser&quot;&gt;&#10;      &lt;description&gt;&#10;        &lt;![CDATA[Firebase In-App Messaging helps you engage your app's active users by sending them targeted, contextual messages]]&gt;&#10;      &lt;/description&gt;&#10;      &lt;step label=&quot;Connect your app to Firebase&quot;&gt;&#10;        &lt;stepElement&gt;&#10;          &lt;action&#10;              key=&quot;firebase.connect&quot;&#10;              label=&quot;Connect to Firebase&quot;&#10;              successMessage=&quot;Connected&quot;&gt;&#10;          &lt;/action&gt;&#10;        &lt;/stepElement&gt;&#10;      &lt;/step&gt;&#10;      &lt;step label=&quot;Add Firebase In-App Messaging to your app&quot;&gt;&#10;        &lt;stepElement&gt;&#10;          &lt;action&#10;              actionArgument=&quot;firebase.fiam&quot;&#10;              key=&quot;firebase.add_dependencies&quot;&#10;              label=&quot;Add Firebase In-App Messaging to your app&quot;&#10;              successMessage=&quot;Dependencies set up correctly&quot;&gt;&#10;            &lt;recipe&gt;&#10;              &lt;classpath mavenUrl=&quot;&amp;google-services-plugin-class;&quot;&gt;&#10;              &lt;/classpath&gt;&#10;              &lt;apply plugin=&quot;&amp;google-services-plugin;&quot;&gt;&#10;              &lt;/apply&gt;&#10;              &lt;dependency mavenUrl=&quot;&amp;fiamd-dependency;&quot;&gt;&#10;              &lt;/dependency&gt;&#10;            &lt;/recipe&gt;&#10;          &lt;/action&gt;&#10;        &lt;/stepElement&gt;&#10;      &lt;/step&gt;&#10;      &lt;step label=&quot;Get your app's Instance ID&quot;&gt;&#10;        &lt;stepElement&gt;&#10;          &lt;section&gt;&#10;            &lt;![CDATA[To conserve power, Firebase In-App Messaging only retrieves messages from the server once per day. That can make testing difficult, so the Firebase console allows you to specify a test device that displays messages on demand. That testing device is determined by a&#10;              &lt;a href=&quot;https://firebase.google.com/docs/reference/android/com/google/firebase/iid/FirebaseInstanceId?utm_source=studio&quot;&gt;&lt;code&gt;FirebaseInstanceId&lt;/code&gt;&lt;/a&gt;&#10;              . Find your testing app's Instance ID by checking the Logcat in Android Studio for the following `Info` level log:]]&gt;&#10;          &lt;/section&gt;&#10;        &lt;/stepElement&gt;&#10;        &lt;stepElement&gt;&#10;          &lt;code&gt;I/FIAM.Headless: Starting InAppMessaging runtime with Instance ID YOUR_APP_ID&lt;/code&gt;&#10;        &lt;/stepElement&gt;&#10;      &lt;/step&gt;&#10;      &lt;step label=&quot;Send a message to your testing device&quot;&gt;&#10;        &lt;stepElement&gt;&#10;          &lt;section&gt;&#10;            &lt;![CDATA[Once you've launched your app on the testing device and you have its Instance ID, you can try out Firebase In-App Messaging set up by sending a test message:]]&gt;&#10;          &lt;/section&gt;&#10;        &lt;/stepElement&gt;&#10;        &lt;stepElement&gt;&#10;          &lt;section&gt;&#10;            &lt;![CDATA[&lt;ol&gt;&#10;                &lt;li&gt;&#10;                  In the Firebase console, open&#10;                  &lt;a href=&quot;https://console.firebase.google.com/project/_/inappmessaging/?utm_source=studio&quot;&gt;In-App Messaging&lt;/a&gt;&#10;                  .&#10;                &lt;/li&gt;&#10;                &lt;li&gt;&#10;                  Once there, click New Campaign.&#10;                &lt;/li&gt;&#10;                &lt;li&gt;&#10;                  Enter a Title for your first message.&#10;                &lt;/li&gt;&#10;                &lt;li&gt;&#10;                  Click Test on your Device&#10;                &lt;/li&gt;&#10;                &lt;li&gt;&#10;                  Enter your app's Instance ID in the Add an instance ID field.&#10;                &lt;/li&gt;&#10;                &lt;li&gt;&#10;                  Click Test to send the message.&#10;                &lt;/li&gt;&#10;              &lt;/ol&gt;]]&gt;&#10;          &lt;/section&gt;&#10;        &lt;/stepElement&gt;&#10;        &lt;stepElement&gt;&#10;          &lt;section&gt;&#10;            &lt;![CDATA[Firebase In-App Messaging sends your test message as soon as you click Test. To see it, close, then reopen the app on your testing device.]]&gt;&#10;          &lt;/section&gt;&#10;        &lt;/stepElement&gt;&#10;      &lt;/step&gt;&#10;    &lt;/tutorial&gt;&#10;  &lt;/feature&gt;&#10;  &lt;feature&#10;      icon=&quot;firebase_ml.png&quot;&#10;      name=&quot;Firebase ML&quot;&#10;      resourceRoot=&quot;/firebase_ml&quot;&#10;      serviceId=&quot;firebase.ml&quot;&gt;&#10;    &lt;description&gt;&#10;      &lt;![CDATA[Firebase ML is a mobile SDK that brings Google's machine learning expertise to Android and iOS apps in a powerful yet easy-to-use package.&#10;        &lt;a href=&quot;https://firebase.google.com/docs/ml/?utm_source=studio&quot;&gt;More info&lt;/a&gt;]]&gt;&#10;    &lt;/description&gt;&#10;    &lt;tutorial&#10;        key=&quot;ml-set-up-image-recognition-on-android&quot;&#10;        label=&quot;Use Firebase ML to recognize and label images&quot;&#10;        remoteLink=&quot;https://firebase.google.com/docs/ml/android/label-images&quot;&#10;        remoteLinkLabel=&quot;Launch in browser&quot;&gt;&#10;      &lt;description&gt;&#10;        &lt;![CDATA[You can use Firebase ML to label objects recognized in an image, using a cloud-based ML model.]]&gt;&#10;      &lt;/description&gt;&#10;      &lt;step label=&quot;Connect your app to Firebase&quot;&gt;&#10;        &lt;stepElement&gt;&#10;          &lt;action&#10;              key=&quot;firebase.connect&quot;&#10;              label=&quot;Connect to Firebase&quot;&#10;              successMessage=&quot;Connected&quot;&gt;&#10;          &lt;/action&gt;&#10;        &lt;/stepElement&gt;&#10;      &lt;/step&gt;&#10;      &lt;step label=&quot;Add Firebase ML to your app&quot;&gt;&#10;        &lt;stepElement&gt;&#10;          &lt;action&#10;              actionArgument=&quot;firebase.ml&quot;&#10;              key=&quot;firebase.add_dependencies&quot;&#10;              label=&quot;Add Firebase ML to your app&quot;&#10;              successMessage=&quot;Dependencies set up correctly&quot;&gt;&#10;            &lt;recipe&gt;&#10;              &lt;classpath mavenUrl=&quot;&amp;google-services-plugin-class;&quot;&gt;&#10;              &lt;/classpath&gt;&#10;              &lt;apply plugin=&quot;&amp;google-services-plugin;&quot;&gt;&#10;              &lt;/apply&gt;&#10;              &lt;dependency mavenUrl=&quot;&amp;ml-vision-dependency;&quot;&gt;&#10;              &lt;/dependency&gt;&#10;            &lt;/recipe&gt;&#10;          &lt;/action&gt;&#10;        &lt;/stepElement&gt;&#10;      &lt;/step&gt;&#10;      &lt;step label=&quot;Enable billing&quot;&gt;&#10;        &lt;stepElement&gt;&#10;          &lt;section&gt;&#10;            &lt;![CDATA[The Cloud Vision APIs require a billing account. Learn how to&#10;              &lt;a href=&quot;https://firebase.google.com/docs/ml/android/label-images#before-you-begin?utm_source=studio&quot;&gt;enable&#10;              billing and the Cloud ML APIs&lt;/a&gt;.]]&gt;&#10;          &lt;/section&gt;&#10;        &lt;/stepElement&gt;&#10;      &lt;/step&gt;&#10;      &lt;step label=&quot;Configure the image labeler&quot;&gt;&#10;        &lt;stepElement&gt;&#10;          &lt;section&gt;&#10;            &lt;![CDATA[By default, the Cloud detector uses the&#10;              &lt;code&gt;STABLE&lt;/code&gt;&#10;              version of the model and returns up to 10 results. If you want to change either of these settings, specify them with a&#10;              &lt;code&gt;FirebaseVisionCloudDetectorOptions&lt;/code&gt;&#10;              object.]]&gt;&#10;          &lt;/section&gt;&#10;        &lt;/stepElement&gt;&#10;        &lt;stepElement&gt;&#10;          &lt;section&gt;&#10;            &lt;![CDATA[For example, to change both of the default settings, build a&#10;              &lt;code&gt;FirebaseVisionCloudDetectorOptions&lt;/code&gt;&#10;              object as in the following example:]]&gt;&#10;          &lt;/section&gt;&#10;        &lt;/stepElement&gt;&#10;        &lt;stepElement&gt;&#10;          &lt;code fileType=&quot;JAVA&quot;&gt;FirebaseVisionCloudDetectorOptions options =&#10;        new FirebaseVisionCloudDetectorOptions.Builder()&#10;                .setModelType(FirebaseVisionCloudDetectorOptions.LATEST_MODEL)&#10;                .setMaxResults(15)&#10;                .build();&lt;/code&gt;&#10;        &lt;/stepElement&gt;&#10;        &lt;stepElement&gt;&#10;          &lt;section&gt;&#10;            &lt;![CDATA[To use the default settings, you can use&#10;              &lt;code&gt;FirebaseVisionCloudDetectorOptions.DEFAULT&lt;/code&gt;&#10;              in the next step.]]&gt;&#10;          &lt;/section&gt;&#10;        &lt;/stepElement&gt;&#10;      &lt;/step&gt;&#10;      &lt;step label=&quot;Run the image labeler&quot;&gt;&#10;        &lt;stepElement&gt;&#10;          &lt;section&gt;&#10;            &lt;![CDATA[To label the image, create a&#10;              &lt;code&gt;FirebaseVisionImage&lt;/code&gt;&#10;              object from either a&#10;              &lt;code&gt;Bitmap&lt;/code&gt;&#10;              ,&#10;              &lt;code&gt;media.Image&lt;/code&gt;&#10;              ,&#10;              &lt;code&gt;ByteBuffer&lt;/code&gt;&#10;              , byte array, or a file on the device. Then, pass the&#10;              &lt;code&gt;FirebaseVisionImage&lt;/code&gt;&#10;              object to the&#10;              &lt;code&gt;FirebaseVisionTextRecognizer&lt;/code&gt;&#10;              's&#10;              &lt;code&gt;processImage&lt;/code&gt;&#10;              method.]]&gt;&#10;          &lt;/section&gt;&#10;        &lt;/stepElement&gt;&#10;        &lt;stepElement&gt;&#10;          &lt;section&gt;&#10;            &lt;![CDATA[Create a&#10;              &lt;code&gt;FirebaseVisionImage&lt;/code&gt;&#10;              object from your image.]]&gt;&#10;          &lt;/section&gt;&#10;        &lt;/stepElement&gt;&#10;        &lt;stepElement&gt;&#10;          &lt;section&gt;&#10;            &lt;![CDATA[To create a&#10;              &lt;code&gt;FirebaseVisionImage&lt;/code&gt;&#10;              object from a Bitmap object:]]&gt;&#10;          &lt;/section&gt;&#10;        &lt;/stepElement&gt;&#10;        &lt;stepElement&gt;&#10;          &lt;code fileType=&quot;JAVA&quot;&gt;FirebaseVisionImage image = FirebaseVisionImage.fromBitmap(bitmap);&lt;/code&gt;&#10;        &lt;/stepElement&gt;&#10;        &lt;stepElement&gt;&#10;          &lt;section&gt;&#10;            &lt;![CDATA[The image represented by the Bitmap object must be upright, with no additional rotation required.]]&gt;&#10;          &lt;/section&gt;&#10;        &lt;/stepElement&gt;&#10;        &lt;stepElement&gt;&#10;          &lt;section&gt;&#10;            &lt;![CDATA[To create a&#10;              &lt;code&gt;FirebaseVisionImage&lt;/code&gt;&#10;              object from a&#10;              &lt;code&gt;media.Image object&lt;/code&gt;&#10;              , such as when capturing an image from a device's camera, first determine the angle the image must be rotated to compensate for both the device's rotation and the orientation of camera sensor in the device:]]&gt;&#10;          &lt;/section&gt;&#10;        &lt;/stepElement&gt;&#10;        &lt;stepElement&gt;&#10;          &lt;code fileType=&quot;JAVA&quot;&gt;private static final SparseIntArray ORIENTATIONS = new SparseIntArray();&#10;static {&#10;    ORIENTATIONS.append(Surface.ROTATION_0, 90);&#10;    ORIENTATIONS.append(Surface.ROTATION_90, 0);&#10;    ORIENTATIONS.append(Surface.ROTATION_180, 270);&#10;    ORIENTATIONS.append(Surface.ROTATION_270, 180);&#10;}&#10;/**&#10; * Get the angle by which an image must be rotated given the device's current&#10; * orientation.&#10; */&#10;@RequiresApi(api = Build.VERSION_CODES.LOLLIPOP)&#10;private int getRotationCompensation(String cameraId, Activity activity, Context context)&#10;        throws CameraAccessException {&#10;    // Get the device's current rotation relative to its &quot;native&quot; orientation.&#10;    // Then, from the ORIENTATIONS table, look up the angle the image must be&#10;    // rotated to compensate for the device's rotation.&#10;    int deviceRotation = activity.getWindowManager().getDefaultDisplay().getRotation();&#10;    int rotationCompensation = ORIENTATIONS.get(deviceRotation);&#10;    // On most devices, the sensor orientation is 90 degrees, but for some&#10;    // devices it is 270 degrees. For devices with a sensor orientation of&#10;    // 270, rotate the image an additional 180 ((270 + 270) % 360) degrees.&#10;    CameraManager cameraManager = (CameraManager) context.getSystemService(CAMERA_SERVICE);&#10;    int sensorOrientation = cameraManager&#10;            .getCameraCharacteristics(cameraId)&#10;            .get(CameraCharacteristics.SENSOR_ORIENTATION);&#10;    rotationCompensation = (rotationCompensation + sensorOrientation + 270) % 360;&#10;    // Return the corresponding FirebaseVisionImageMetadata rotation value.&#10;    int result;&#10;    switch (rotationCompensation) {&#10;        case 0:&#10;            result = FirebaseVisionImageMetadata.ROTATION_0;&#10;            break;&#10;        case 90:&#10;            result = FirebaseVisionImageMetadata.ROTATION_90;&#10;            break;&#10;        case 180:&#10;            result = FirebaseVisionImageMetadata.ROTATION_180;&#10;            break;&#10;        case 270:&#10;            result = FirebaseVisionImageMetadata.ROTATION_270;&#10;            break;&#10;        default:&#10;            result = FirebaseVisionImageMetadata.ROTATION_0;&#10;            Log.e(TAG, &quot;Bad rotation value: &quot; + rotationCompensation);&#10;    }&#10;    return result;&#10; }&lt;/code&gt;&#10;        &lt;/stepElement&gt;&#10;        &lt;stepElement&gt;&#10;          &lt;section&gt;&#10;            &lt;![CDATA[Then, pass the&#10;              &lt;code&gt;media.Image&lt;/code&gt;&#10;              object and the rotation value to&#10;              &lt;code&gt;FirebaseVisionImage.fromMediaImage()&lt;/code&gt;&#10;              :]]&gt;&#10;          &lt;/section&gt;&#10;        &lt;/stepElement&gt;&#10;        &lt;stepElement&gt;&#10;          &lt;code fileType=&quot;JAVA&quot;&gt;FirebaseVisionImage image = FirebaseVisionImage.fromMediaImage(mediaImage, rotation);&lt;/code&gt;&#10;        &lt;/stepElement&gt;&#10;        &lt;stepElement&gt;&#10;          &lt;section&gt;&#10;            &lt;![CDATA[To create a&#10;              &lt;code&gt;FirebaseVisionImage&lt;/code&gt;&#10;              object from a&#10;              &lt;code&gt;ByteBuffer&lt;/code&gt;&#10;              or a byte array, first calculate the image rotation as described above. Then, create a&#10;              &lt;code&gt;FirebaseVisionImageMetadata&lt;/code&gt;&#10;              object that contains the image's height, width, color encoding format, and rotation:]]&gt;&#10;          &lt;/section&gt;&#10;        &lt;/stepElement&gt;&#10;        &lt;stepElement&gt;&#10;          &lt;code fileType=&quot;JAVA&quot;&gt;FirebaseVisionImageMetadata metadata = new FirebaseVisionImageMetadata.Builder()&#10;        .setWidth(480)   // 480x360 is typically sufficient for&#10;        .setHeight(360)  // image recognition&#10;        .setFormat(FirebaseVisionImageMetadata.IMAGE_FORMAT_NV21)&#10;        .setRotation(rotation)&#10;        .build();&lt;/code&gt;&#10;        &lt;/stepElement&gt;&#10;        &lt;stepElement&gt;&#10;          &lt;section&gt;&#10;            &lt;![CDATA[Use the buffer or array, and the metadata object, to create a&#10;              &lt;code&gt;FirebaseVisionImage&lt;/code&gt;&#10;              object:]]&gt;&#10;          &lt;/section&gt;&#10;        &lt;/stepElement&gt;&#10;        &lt;stepElement&gt;&#10;          &lt;code fileType=&quot;JAVA&quot;&gt;FirebaseVisionImage image = FirebaseVisionImage.fromByteBuffer(buffer, metadata);&#10;// Or: FirebaseVisionImage image = FirebaseVisionImage.fromByteArray(byteArray, metadata);&lt;/code&gt;&#10;        &lt;/stepElement&gt;&#10;        &lt;stepElement&gt;&#10;          &lt;section&gt;&#10;            &lt;![CDATA[To create a&#10;              &lt;code&gt;FirebaseVisionImage&lt;/code&gt;&#10;              object from a file, pass the app context and file URI to&#10;              &lt;code&gt;FirebaseVisionImage.fromFilePath()&lt;/code&gt;&#10;              :]]&gt;&#10;          &lt;/section&gt;&#10;        &lt;/stepElement&gt;&#10;        &lt;stepElement&gt;&#10;          &lt;code fileType=&quot;JAVA&quot;&gt;FirebaseVisionImage image;&#10;try {&#10;    image = FirebaseVisionImage.fromFilePath(context, uri);&#10;} catch (IOException e) {&#10;    e.printStackTrace();&#10;}&lt;/code&gt;&#10;        &lt;/stepElement&gt;&#10;        &lt;stepElement&gt;&#10;          &lt;section&gt;&#10;            &lt;![CDATA[Get an instance of&#10;              &lt;code&gt;FirebaseVisionCloudLabelDetector&lt;/code&gt;&#10;              :]]&gt;&#10;          &lt;/section&gt;&#10;        &lt;/stepElement&gt;&#10;        &lt;stepElement&gt;&#10;          &lt;code fileType=&quot;JAVA&quot;&gt;FirebaseVisionImageLabeler detector = FirebaseVision.getInstance()&#10;        .getCloudImageLabeler();&#10;&#10;// Or, to change the default settings:&#10;//FirebaseVisionImageLabeler detector = FirebaseVision.getInstance()&#10;//        .getCloudImageLabeler(options);&lt;/code&gt;&#10;        &lt;/stepElement&gt;&#10;        &lt;stepElement&gt;&#10;          &lt;section&gt;&#10;            &lt;![CDATA[Finally, pass the image to the detect method:]]&gt;&#10;          &lt;/section&gt;&#10;        &lt;/stepElement&gt;&#10;        &lt;stepElement&gt;&#10;          &lt;code fileType=&quot;JAVA&quot;&gt;Task&amp;lt;List&amp;lt;FirebaseVisionImageLabel&amp;gt;&amp;gt; result = detector.processImage(image)&#10;        .addOnSuccessListener(&#10;                new OnSuccessListener&amp;lt;List&amp;lt;FirebaseVisionImageLabel&amp;gt;&amp;gt;() {&#10;                    @Override&#10;                    public void onSuccess(List&amp;lt;FirebaseVisionImageLabel&amp;gt; labels) {&#10;                        // Task completed successfully&#10;                        // ...&#10;                    }&#10;                })&#10;        .addOnFailureListener(&#10;                new OnFailureListener() {&#10;                    @Override&#10;                    public void onFailure(@NonNull Exception e) {&#10;                        // Task failed with an exception&#10;                        // ...&#10;                    }&#10;                });&lt;/code&gt;&#10;        &lt;/stepElement&gt;&#10;      &lt;/step&gt;&#10;      &lt;step label=&quot;Get information about labeled objects&quot;&gt;&#10;        &lt;stepElement&gt;&#10;          &lt;section&gt;&#10;            &lt;![CDATA[If the image labeling operation succeeds, a list of FirebaseVisionCloudLabel objects will be passed to the success listener. Each&#10;              &lt;code&gt;FirebaseVisionCloudLabel&lt;/code&gt;&#10;              s object represents something that was labeled in the image. For each label, you can get its text description, its Knowledge Graph entity ID (if available), and the confidence score of the match. For example:]]&gt;&#10;          &lt;/section&gt;&#10;        &lt;/stepElement&gt;&#10;        &lt;stepElement&gt;&#10;          &lt;code fileType=&quot;JAVA&quot;&gt;for (FirebaseVisionImageLabel label: labels) {&#10;    String text = label.getText();&#10;    String entityId = label.getEntityId();&#10;    float confidence = label.getConfidence();&#10;}&lt;/code&gt;&#10;        &lt;/stepElement&gt;&#10;      &lt;/step&gt;&#10;    &lt;/tutorial&gt;&#10;    &lt;tutorial&#10;        key=&quot;ml-set-up-text-recognition-on-android&quot;&#10;        label=&quot;Use Firebase ML to recognize text in images&quot;&#10;        remoteLink=&quot;https://firebase.google.com/docs/ml/android/recognize-text&quot;&#10;        remoteLinkLabel=&quot;Launch in browser&quot;&gt;&#10;      &lt;description&gt;&#10;        &lt;![CDATA[Firebase ML has both a general-purpose API suitable for recognizing text in images, such as the text of a street sign, and an API optimized for recognizing the text of documents.]]&gt;&#10;      &lt;/description&gt;&#10;      &lt;step label=&quot;Connect your app to Firebase&quot;&gt;&#10;        &lt;stepElement&gt;&#10;          &lt;action&#10;              key=&quot;firebase.connect&quot;&#10;              label=&quot;Connect to Firebase&quot;&#10;              successMessage=&quot;Connected&quot;&gt;&#10;          &lt;/action&gt;&#10;        &lt;/stepElement&gt;&#10;      &lt;/step&gt;&#10;      &lt;step label=&quot;Enable billing&quot;&gt;&#10;        &lt;stepElement&gt;&#10;          &lt;section&gt;&#10;            &lt;![CDATA[The Cloud Vision APIs require a billing account. Learn how to&#10;              &lt;a href=&quot;https://firebase.google.com/docs/ml/android/recognize-text#before-you-begin?utm_source=studio&quot;&gt;enable&#10;              billing and the Cloud ML APIs&lt;/a&gt;.]]&gt;&#10;          &lt;/section&gt;&#10;        &lt;/stepElement&gt;&#10;      &lt;/step&gt;&#10;      &lt;step label=&quot;Add Firebase ML to your app&quot;&gt;&#10;        &lt;stepElement&gt;&#10;          &lt;action&#10;              actionArgument=&quot;firebase.ml&quot;&#10;              key=&quot;firebase.add_dependencies&quot;&#10;              label=&quot;Add Firebase ML to your app&quot;&#10;              successMessage=&quot;Dependencies set up correctly&quot;&gt;&#10;            &lt;recipe&gt;&#10;              &lt;classpath mavenUrl=&quot;&amp;google-services-plugin-class;&quot;&gt;&#10;              &lt;/classpath&gt;&#10;              &lt;apply plugin=&quot;&amp;google-services-plugin;&quot;&gt;&#10;              &lt;/apply&gt;&#10;              &lt;dependency mavenUrl=&quot;&amp;ml-vision-dependency;&quot;&gt;&#10;              &lt;/dependency&gt;&#10;            &lt;/recipe&gt;&#10;          &lt;/action&gt;&#10;        &lt;/stepElement&gt;&#10;      &lt;/step&gt;&#10;      &lt;step label=&quot;Recognize text in images&quot;&gt;&#10;        &lt;stepElement&gt;&#10;          &lt;section&gt;&#10;            &lt;![CDATA[Run the text recognizer]]&gt;&#10;          &lt;/section&gt;&#10;        &lt;/stepElement&gt;&#10;        &lt;stepElement&gt;&#10;          &lt;section&gt;&#10;            &lt;![CDATA[To recognize text in an image, create a&#10;              &lt;code&gt;FirebaseVisionImage&lt;/code&gt;&#10;              object from either a&#10;              &lt;code&gt;Bitmap&lt;/code&gt;&#10;              ,&#10;              &lt;code&gt;media.Image&lt;/code&gt;&#10;              ,&#10;              &lt;code&gt;ByteBuffer&lt;/code&gt;&#10;              , byte array, or a file on the device. Then, pass the&#10;              &lt;code&gt;FirebaseVisionImage&lt;/code&gt;&#10;              object to the&#10;              &lt;code&gt;FirebaseVisionTextRecognizer&lt;/code&gt;&#10;              's&#10;              &lt;code&gt;processImage&lt;/code&gt;&#10;              method.]]&gt;&#10;          &lt;/section&gt;&#10;        &lt;/stepElement&gt;&#10;        &lt;stepElement&gt;&#10;          &lt;section&gt;&#10;            &lt;![CDATA[Create a&#10;              &lt;code&gt;FirebaseVisionImage&lt;/code&gt;&#10;              object from your image.]]&gt;&#10;          &lt;/section&gt;&#10;        &lt;/stepElement&gt;&#10;        &lt;stepElement&gt;&#10;          &lt;section&gt;&#10;            &lt;![CDATA[To create a&#10;              &lt;code&gt;FirebaseVisionImage&lt;/code&gt;&#10;              object from a Bitmap object:]]&gt;&#10;          &lt;/section&gt;&#10;        &lt;/stepElement&gt;&#10;        &lt;stepElement&gt;&#10;          &lt;code fileType=&quot;JAVA&quot;&gt;FirebaseVisionImage image = FirebaseVisionImage.fromBitmap(bitmap);&lt;/code&gt;&#10;        &lt;/stepElement&gt;&#10;        &lt;stepElement&gt;&#10;          &lt;section&gt;&#10;            &lt;![CDATA[The image represented by the Bitmap object must be upright, with no additional rotation required.]]&gt;&#10;          &lt;/section&gt;&#10;        &lt;/stepElement&gt;&#10;        &lt;stepElement&gt;&#10;          &lt;section&gt;&#10;            &lt;![CDATA[To create a&#10;              &lt;code&gt;FirebaseVisionImage&lt;/code&gt;&#10;              object from a&#10;              &lt;code&gt;media.Image object&lt;/code&gt;&#10;              , such as when capturing an image from a device's camera, first determine the angle the image must be rotated to compensate for both the device's rotation and the orientation of camera sensor in the device:]]&gt;&#10;          &lt;/section&gt;&#10;        &lt;/stepElement&gt;&#10;        &lt;stepElement&gt;&#10;          &lt;code fileType=&quot;JAVA&quot;&gt;private static final SparseIntArray ORIENTATIONS = new SparseIntArray();&#10;static {&#10;    ORIENTATIONS.append(Surface.ROTATION_0, 90);&#10;    ORIENTATIONS.append(Surface.ROTATION_90, 0);&#10;    ORIENTATIONS.append(Surface.ROTATION_180, 270);&#10;    ORIENTATIONS.append(Surface.ROTATION_270, 180);&#10;}&#10;/**&#10; * Get the angle by which an image must be rotated given the device's current&#10; * orientation.&#10; */&#10;@RequiresApi(api = Build.VERSION_CODES.LOLLIPOP)&#10;private int getRotationCompensation(String cameraId, Activity activity, Context context)&#10;        throws CameraAccessException {&#10;    // Get the device's current rotation relative to its &quot;native&quot; orientation.&#10;    // Then, from the ORIENTATIONS table, look up the angle the image must be&#10;    // rotated to compensate for the device's rotation.&#10;    int deviceRotation = activity.getWindowManager().getDefaultDisplay().getRotation();&#10;    int rotationCompensation = ORIENTATIONS.get(deviceRotation);&#10;    // On most devices, the sensor orientation is 90 degrees, but for some&#10;    // devices it is 270 degrees. For devices with a sensor orientation of&#10;    // 270, rotate the image an additional 180 ((270 + 270) % 360) degrees.&#10;    CameraManager cameraManager = (CameraManager) context.getSystemService(CAMERA_SERVICE);&#10;    int sensorOrientation = cameraManager&#10;            .getCameraCharacteristics(cameraId)&#10;            .get(CameraCharacteristics.SENSOR_ORIENTATION);&#10;    rotationCompensation = (rotationCompensation + sensorOrientation + 270) % 360;&#10;    // Return the corresponding FirebaseVisionImageMetadata rotation value.&#10;    int result;&#10;    switch (rotationCompensation) {&#10;        case 0:&#10;            result = FirebaseVisionImageMetadata.ROTATION_0;&#10;            break;&#10;        case 90:&#10;            result = FirebaseVisionImageMetadata.ROTATION_90;&#10;            break;&#10;        case 180:&#10;            result = FirebaseVisionImageMetadata.ROTATION_180;&#10;            break;&#10;        case 270:&#10;            result = FirebaseVisionImageMetadata.ROTATION_270;&#10;            break;&#10;        default:&#10;            result = FirebaseVisionImageMetadata.ROTATION_0;&#10;            Log.e(TAG, &quot;Bad rotation value: &quot; + rotationCompensation);&#10;    }&#10;    return result;&#10; }&lt;/code&gt;&#10;        &lt;/stepElement&gt;&#10;        &lt;stepElement&gt;&#10;          &lt;section&gt;&#10;            &lt;![CDATA[Then, pass the&#10;              &lt;code&gt;media.Image&lt;/code&gt;&#10;              object and the rotation value to&#10;              &lt;code&gt;FirebaseVisionImage.fromMediaImage()&lt;/code&gt;&#10;              :]]&gt;&#10;          &lt;/section&gt;&#10;        &lt;/stepElement&gt;&#10;        &lt;stepElement&gt;&#10;          &lt;code fileType=&quot;JAVA&quot;&gt;FirebaseVisionImage image = FirebaseVisionImage.fromMediaImage(mediaImage, rotation);&lt;/code&gt;&#10;        &lt;/stepElement&gt;&#10;        &lt;stepElement&gt;&#10;          &lt;section&gt;&#10;            &lt;![CDATA[To create a&#10;              &lt;code&gt;FirebaseVisionImage&lt;/code&gt;&#10;              object from a&#10;              &lt;code&gt;ByteBuffer&lt;/code&gt;&#10;              or a byte array, first calculate the image rotation as described above. Then, create a&#10;              &lt;code&gt;FirebaseVisionImageMetadata&lt;/code&gt;&#10;              object that contains the image's height, width, color encoding format, and rotation:]]&gt;&#10;          &lt;/section&gt;&#10;        &lt;/stepElement&gt;&#10;        &lt;stepElement&gt;&#10;          &lt;code fileType=&quot;JAVA&quot;&gt;FirebaseVisionImageMetadata metadata = new FirebaseVisionImageMetadata.Builder()&#10;        .setWidth(480)   // 480x360 is typically sufficient for&#10;        .setHeight(360)  // image recognition&#10;        .setFormat(FirebaseVisionImageMetadata.IMAGE_FORMAT_NV21)&#10;        .setRotation(rotation)&#10;        .build();&lt;/code&gt;&#10;        &lt;/stepElement&gt;&#10;        &lt;stepElement&gt;&#10;          &lt;section&gt;&#10;            &lt;![CDATA[Use the buffer or array, and the metadata object, to create a&#10;              &lt;code&gt;FirebaseVisionImage&lt;/code&gt;&#10;              object:]]&gt;&#10;          &lt;/section&gt;&#10;        &lt;/stepElement&gt;&#10;        &lt;stepElement&gt;&#10;          &lt;code fileType=&quot;JAVA&quot;&gt;FirebaseVisionImage image = FirebaseVisionImage.fromByteBuffer(buffer, metadata);&#10;// Or: FirebaseVisionImage image = FirebaseVisionImage.fromByteArray(byteArray, metadata);&lt;/code&gt;&#10;        &lt;/stepElement&gt;&#10;        &lt;stepElement&gt;&#10;          &lt;section&gt;&#10;            &lt;![CDATA[To create a&#10;              &lt;code&gt;FirebaseVisionImage&lt;/code&gt;&#10;              object from a file, pass the app context and file URI to&#10;              &lt;code&gt;FirebaseVisionImage.fromFilePath()&lt;/code&gt;&#10;              :]]&gt;&#10;          &lt;/section&gt;&#10;        &lt;/stepElement&gt;&#10;        &lt;stepElement&gt;&#10;          &lt;code fileType=&quot;JAVA&quot;&gt;FirebaseVisionImage image;&#10;try {&#10;    image = FirebaseVisionImage.fromFilePath(context, uri);&#10;} catch (IOException e) {&#10;    e.printStackTrace();&#10;}&lt;/code&gt;&#10;        &lt;/stepElement&gt;&#10;        &lt;stepElement&gt;&#10;          &lt;section&gt;&#10;            &lt;![CDATA[Get an instance of&#10;              &lt;code&gt;FirebaseVisionTextRecognizer&lt;/code&gt;&#10;              .]]&gt;&#10;          &lt;/section&gt;&#10;        &lt;/stepElement&gt;&#10;        &lt;stepElement&gt;&#10;          &lt;code fileType=&quot;JAVA&quot;&gt;FirebaseVisionTextRecognizer textRecognizer = FirebaseVision.getInstance()&#10;        .getCloudTextRecognizer();&#10;&#10;// Or, to provide language hints to assist with language detection:&#10;// See https://cloud.google.com/vision/docs/languages for supported languages&#10;FirebaseVisionCloudTextRecognizerOptions options =&#10;        new FirebaseVisionCloudTextRecognizerOptions.Builder()&#10;                .setLanguageHints(Arrays.asList(&quot;en&quot;, &quot;hi&quot;))&#10;                .build();&#10;FirebaseVisionTextRecognizer textRecognizer = FirebaseVision.getInstance()&#10;        .getCloudTextRecognizer(options);&lt;/code&gt;&#10;        &lt;/stepElement&gt;&#10;        &lt;stepElement&gt;&#10;          &lt;section&gt;&#10;            &lt;![CDATA[Finally, pass the image to the&#10;              &lt;code&gt;processImage&lt;/code&gt;&#10;              method:]]&gt;&#10;          &lt;/section&gt;&#10;        &lt;/stepElement&gt;&#10;        &lt;stepElement&gt;&#10;          &lt;code fileType=&quot;JAVA&quot;&gt;textRecognizer.processImage(image)&#10;        .addOnSuccessListener(new OnSuccessListener&amp;lt;FirebaseVisionText&amp;gt;() {&#10;            @Override&#10;            public void onSuccess(FirebaseVisionText result) {&#10;                // Task completed successfully&#10;                // ...&#10;            }&#10;        })&#10;        .addOnFailureListener(&#10;                new OnFailureListener() {&#10;                    @Override&#10;                    public void onFailure(@NonNull Exception e) {&#10;                        // Task failed with an exception&#10;                        // ...&#10;                    }&#10;                });&lt;/code&gt;&#10;        &lt;/stepElement&gt;&#10;        &lt;stepElement&gt;&#10;          &lt;section&gt;&#10;            &lt;![CDATA[Extract text from blocks of recognized text]]&gt;&#10;          &lt;/section&gt;&#10;        &lt;/stepElement&gt;&#10;        &lt;stepElement&gt;&#10;          &lt;section&gt;&#10;            &lt;![CDATA[If the text recognition operation succeeds, a&#10;              &lt;code&gt;FirebaseVisionText&lt;/code&gt;&#10;              object will be passed to the success listener. A&#10;              &lt;code&gt;FirebaseVisionText&lt;/code&gt;&#10;              object contains the full text recognized in the image and zero or more&#10;              &lt;code&gt;TextBlock&lt;/code&gt;&#10;              objects. Each&#10;              &lt;code&gt;TextBlock&lt;/code&gt;&#10;              represents a rectangular block of text, which contains zero or more&#10;              &lt;code&gt;Line&lt;/code&gt;&#10;              objects. Each&#10;              &lt;code&gt;Line&lt;/code&gt;&#10;              object contains zero or more&#10;              &lt;code&gt;Element&lt;/code&gt;&#10;              objects, which represent words and word-like entities (dates, numbers, and so on). For each&#10;              &lt;code&gt;TextBlock&lt;/code&gt;&#10;              ,&#10;              &lt;code&gt;Line&lt;/code&gt;&#10;              , and&#10;              &lt;code&gt;Element&lt;/code&gt;&#10;              object, you can get the text recognized in the region and the bounding coordinates of the region.]]&gt;&#10;          &lt;/section&gt;&#10;        &lt;/stepElement&gt;&#10;        &lt;stepElement&gt;&#10;          &lt;code fileType=&quot;JAVA&quot;&gt;String resultText = result.getText();&#10;for (TextBlock block: result.getTextBlocks()) {&#10;    String blockText = block.getText();&#10;    Float blockConfidence = block.getConfidence();&#10;    List&amp;lt;RecognizedLanguage&amp;gt; blockLanguages = block.getRecognizedLanguages();&#10;    Point[] blockCornerPoints = block.getCornerPoints();&#10;    Rect blockFrame = block.getBoundingBox();&#10;    for (Line line: block.getLines()) {&#10;        String lineText = line.getText();&#10;        Float lineConfidence = line.getConfidence();&#10;        List&amp;lt;RecognizedLanguage&amp;gt; lineLanguages = line.getRecognizedLanguages();&#10;        Point[] lineCornerPoints = line.getCornerPoints();&#10;        Rect lineFrame = line.getBoundingBox();&#10;        for (Element element: line.getElements()) {&#10;            String elementText = element.getText();&#10;            Float elementConfidence = element.getConfidence();&#10;            List&amp;lt;RecognizedLanguage&amp;gt; elementLanguages = element.getRecognizedLanguages();&#10;            Point[] elementCornerPoints = element.getCornerPoints();&#10;            Rect elementFrame = element.getBoundingBox();&#10;        }&#10;    }&#10;}&lt;/code&gt;&#10;        &lt;/stepElement&gt;&#10;      &lt;/step&gt;&#10;      &lt;step label=&quot;Recognize text in images of documents&quot;&gt;&#10;        &lt;stepElement&gt;&#10;          &lt;section&gt;&#10;            &lt;![CDATA[To recognize the text of a document, configure and run the cloud-based document text recognizer as described below.]]&gt;&#10;          &lt;/section&gt;&#10;        &lt;/stepElement&gt;&#10;        &lt;stepElement&gt;&#10;          &lt;section&gt;&#10;            &lt;![CDATA[The document text recognition API, described below, provides an interface that is intended to be more convenient for working with images of documents. However, if you prefer the interface provided by the&#10;              &lt;code&gt;FirebaseVisionTextRecognizer&lt;/code&gt;&#10;              API, you can use it instead to scan documents by configuring the cloud text recognizer to use the dense text model.]]&gt;&#10;          &lt;/section&gt;&#10;        &lt;/stepElement&gt;&#10;        &lt;stepElement&gt;&#10;          &lt;section&gt;&#10;            &lt;![CDATA[Run the text recognizer]]&gt;&#10;          &lt;/section&gt;&#10;        &lt;/stepElement&gt;&#10;        &lt;stepElement&gt;&#10;          &lt;section&gt;&#10;            &lt;![CDATA[To recognize text in an image, create a&#10;              &lt;code&gt;FirebaseVisionImage&lt;/code&gt;&#10;              object from either a&#10;              &lt;code&gt;Bitmap&lt;/code&gt;&#10;              ,&#10;              &lt;code&gt;media.Image&lt;/code&gt;&#10;              ,&#10;              &lt;code&gt;ByteBuffer&lt;/code&gt;&#10;              , byte array, or a file on the device. Then, pass the&#10;              &lt;code&gt;FirebaseVisionImage&lt;/code&gt;&#10;              object to the&#10;              &lt;code&gt;FirebaseVisionDocumentTextRecognizer&lt;/code&gt;&#10;              's&#10;              &lt;code&gt;processImage&lt;/code&gt;&#10;              method.]]&gt;&#10;          &lt;/section&gt;&#10;        &lt;/stepElement&gt;&#10;        &lt;stepElement&gt;&#10;          &lt;section&gt;&#10;            &lt;![CDATA[A. Create a&#10;              &lt;code&gt;FirebaseVisionImage&lt;/code&gt;&#10;              object from your image, this is the same process as above.]]&gt;&#10;          &lt;/section&gt;&#10;        &lt;/stepElement&gt;&#10;        &lt;stepElement&gt;&#10;          &lt;section&gt;&#10;            &lt;![CDATA[B. Get an instance of&#10;              &lt;code&gt;FirebaseVisionDocumentTextRecognizer&lt;/code&gt;&#10;              :]]&gt;&#10;          &lt;/section&gt;&#10;        &lt;/stepElement&gt;&#10;        &lt;stepElement&gt;&#10;          &lt;code fileType=&quot;JAVA&quot;&gt;FirebaseVisionDocumentTextRecognizer textRecognizer = FirebaseVision.getInstance()&#10;        .getCloudDocumentTextRecognizer();&#10;&#10;// Or, to provide language hints to assist with language detection:&#10;// See https://cloud.google.com/vision/docs/languages for supported languages&#10;FirebaseVisionCloudDocumentRecognizerOptions options =&#10;        new FirebaseVisionCloudDocumentRecognizerOptions.Builder()&#10;                .setLanguageHints(Arrays.asList(&quot;en&quot;, &quot;hi&quot;))&#10;                .build();&#10;FirebaseVisionDocumentTextRecognizer textRecognizer = FirebaseVision.getInstance()&#10;        .getCloudDocumentTextRecognizer(options);&lt;/code&gt;&#10;        &lt;/stepElement&gt;&#10;        &lt;stepElement&gt;&#10;          &lt;section&gt;&#10;            &lt;![CDATA[C. Finally, pass the image to the&#10;              &lt;code&gt;processImage&lt;/code&gt;&#10;              method:]]&gt;&#10;          &lt;/section&gt;&#10;        &lt;/stepElement&gt;&#10;        &lt;stepElement&gt;&#10;          &lt;code fileType=&quot;JAVA&quot;&gt;textRecognizer.processImage(image)&#10;        .addOnSuccessListener(new OnSuccessListener&amp;lt;FirebaseVisionDocumentText&amp;gt;() {&#10;            @Override&#10;            public void onSuccess(FirebaseVisionDocumentText result) {&#10;                // Task completed successfully&#10;                // ...&#10;            }&#10;        })&#10;        .addOnFailureListener(&#10;                new OnFailureListener() {&#10;                    @Override&#10;                    public void onFailure(@NonNull Exception e) {&#10;                        // Task failed with an exception&#10;                        // ...&#10;                    }&#10;                });&lt;/code&gt;&#10;        &lt;/stepElement&gt;&#10;        &lt;stepElement&gt;&#10;          &lt;section&gt;&#10;            &lt;![CDATA[Extract text from blocks of recognized text]]&gt;&#10;          &lt;/section&gt;&#10;        &lt;/stepElement&gt;&#10;        &lt;stepElement&gt;&#10;          &lt;section&gt;&#10;            &lt;![CDATA[If the text recognition operation succeeds, it will return a&#10;              &lt;code&gt;FirebaseVisionDocumentText&lt;/code&gt;&#10;              object. A&#10;              &lt;code&gt;FirebaseVisionDocumentText&lt;/code&gt;&#10;              object contains the full text recognized in the image and a hierarchy of objects that reflect the structure of the recognized document:]]&gt;&#10;          &lt;/section&gt;&#10;        &lt;/stepElement&gt;&#10;        &lt;stepElement&gt;&#10;          &lt;section&gt;&#10;            &lt;![CDATA[&lt;ul&gt;&#10;                &lt;li&gt;&#10;                  &lt;code&gt;FirebaseVisionDocumentText.Block&lt;/code&gt;&#10;                &lt;/li&gt;&#10;                &lt;li&gt;&#10;                  &lt;code&gt;FirebaseVisionDocumentText.Paragraph&lt;/code&gt;&#10;                &lt;/li&gt;&#10;                &lt;li&gt;&#10;                  &lt;code&gt;FirebaseVisionDocumentText.Word&lt;/code&gt;&#10;                &lt;/li&gt;&#10;                &lt;li&gt;&#10;                  &lt;code&gt;FirebaseVisionDocumentText.Symbol&lt;/code&gt;&#10;                &lt;/li&gt;&#10;              &lt;/ul&gt;]]&gt;&#10;          &lt;/section&gt;&#10;        &lt;/stepElement&gt;&#10;        &lt;stepElement&gt;&#10;          &lt;section&gt;&#10;            &lt;![CDATA[For each&#10;              &lt;code&gt;Block&lt;/code&gt;&#10;              ,&#10;              &lt;code&gt;Paragraph&lt;/code&gt;&#10;              ,&#10;              &lt;code&gt;Word&lt;/code&gt;&#10;              , and&#10;              &lt;code&gt;Symbol&lt;/code&gt;&#10;              object, you can get the text recognized in the region and the bounding coordinates of the region.]]&gt;&#10;          &lt;/section&gt;&#10;        &lt;/stepElement&gt;&#10;        &lt;stepElement&gt;&#10;          &lt;code fileType=&quot;JAVA&quot;&gt;String resultText = result.getText();&#10;for (Block block: result.getBlocks()) {&#10;    String blockText = block.getText();&#10;    Float blockConfidence = block.getConfidence();&#10;    List&amp;lt;RecognizedLanguage&amp;gt; blockRecognizedLanguages = block.getRecognizedLanguages();&#10;    Rect blockFrame = block.getBoundingBox();&#10;    for (Paragraph paragraph: block.getParagraphs()) {&#10;        String paragraphText = paragraph.getText();&#10;        Float paragraphConfidence = paragraph.getConfidence();&#10;        List&amp;lt;RecognizedLanguage&amp;gt; paragraphRecognizedLanguages = paragraph.getRecognizedLanguages();&#10;        Rect paragraphFrame = paragraph.getBoundingBox();&#10;        for (Word word: paragraph.getWords()) {&#10;            String wordText = word.getText();&#10;            Float wordConfidence = word.getConfidence();&#10;            List&amp;lt;RecognizedLanguage&amp;gt; wordRecognizedLanguages = word.getRecognizedLanguages();&#10;            Rect wordFrame = word.getBoundingBox();&#10;            for (Symbol symbol: word.getSymbols()) {&#10;                String symbolText = symbol.getText();&#10;                Float symbolConfidence = symbol.getConfidence();&#10;                List&amp;lt;RecognizedLanguage&amp;gt; symbolRecognizedLanguages = symbol.getRecognizedLanguages();&#10;                Rect symbolFrame = symbol.getBoundingBox();&#10;            }&#10;        }&#10;    }&#10;}&lt;/code&gt;&#10;        &lt;/stepElement&gt;&#10;      &lt;/step&gt;&#10;      &lt;step label=&quot;Next Steps&quot;&gt;&#10;        &lt;stepElement&gt;&#10;          &lt;section&gt;&#10;            &lt;![CDATA[Before you deploy to production an app that uses a Cloud API, you should take some additional steps to&#10;              &lt;a href=&quot;https://firebase.google.com/docs/ml/android/secure-api-key?utm_source=studio&quot;&gt;prevent and mitigate the effect of unauthorized API access&lt;/a&gt;&#10;              .]]&gt;&#10;          &lt;/section&gt;&#10;        &lt;/stepElement&gt;&#10;      &lt;/step&gt;&#10;    &lt;/tutorial&gt;&#10;  &lt;/feature&gt;&#10;&lt;/tutorialBundle&gt;&#10;" />
    <property name="com.google.services.firebase.firebase_servicesfirebase_ml_dark.png" value="rO0ABXNyABVqYXZheC5zd2luZy5JbWFnZUljb27ypjVu3gwOMgMABUkABmhlaWdodEkABXdpZHRoTAARYWNjZXNzaWJsZUNvbnRleHR0ACtMamF2YXgvc3dpbmcvSW1hZ2VJY29uJEFjY2Vzc2libGVJbWFnZUljb247TAALZGVzY3JpcHRpb250ABJMamF2YS9sYW5nL1N0cmluZztMAA1pbWFnZU9ic2VydmVydAAeTGphdmEvYXd0L2ltYWdlL0ltYWdlT2JzZXJ2ZXI7eHAAAAAUAAAAFHBwcHcIAAAAFAAAABR1cgACW0lNumAmduqypQIAAHhwAAABkAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAABX///8V////AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAs////o////6P///8s////AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAFH///+z////s////1H///8AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAFP///4v///+L////FP///wAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAWv///1r///8AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAACP///x7///8j////I////yP///9r////a////yP///8j////I////x7///8I////AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAC////+R////rf///7D///+w////sP///7L///+y////sP///7D///+w////rf///5H///8v////AAAAAAAAAAAAAAAAAAAAAAAAAAAW////oP///6T///9o////W////1v///9b////W////1v///9b////W////1v///9o////pP///6D///8Z////AAAAAAAAAAAAAAAAAf///0r///+y////Qf///wAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAABB////sv///03///8B////AAAAAAAAAABT////of///7D///8j////A////w////8I////AAAAAAAAAAAAAAAAAAAAAAj///8P////A////yP///+w////of///1P///8AAAAAAAAAAIP///+z////sP///yP///8g////oP///1P///8AAAAAAAAAAAAAAAAAAAAAUP///6D///8g////I////7D///+z////g////wAAAAAAAAAAg////7P///+w////I////yP///+w////W////wAAAAAAAAAAAAAAAAAAAABY////sP///yP///8j////sP///7P///+D////AAAAAAAAAACD////s////7D///8j////I////7D///9b////AAAAAAAAAAAAAAAAAAAAAFj///+w////I////yP///+w////s////4P///8AAAAAAAAAAG////+w////sP///yP///8M////O////x////8D////A////wP///8D////Hf///zv///8M////I////7D///+w////b////wAAAAAAAAAACv///2b///+w////I////wAAAAAAAAAABv///3n///+Q////kP///3n///8I////AAAAAAAAAAAj////sP///2n///8L////AAAAAAAAAAAAAAAATv///7L///82////AAAAAAAAAAAAAAAAU////5D///+Q////VP///wAAAAAAAAAAAAAAADb///+y////Uf///wAAAAAAAAAAAAAAAAAAAAAg////qf///5b///9I////PP///zz///89////Pv///z7///89////PP///zz///9I////lv///6n///8i////AAAAAAAAAAAAAAAAAAAAAAH///9G////pP///7P///+z////s////7P///+z////s////7P///+z////s////7P///+k////Rv///wH///8AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAV////Nv///zz///88////PP///zz///88////PP///zz///88////Nv///xX///8AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAB4" />
    <property name="file.chooser.recent.files" value="$USER_HOME$/.config/Google/AndroidStudio4.1&#10;/home/mepowerleo10/AndroidStudioProjects/SikiaAudioBooks&#10;/home/mepowerleo10/Documents/Sikia AudioBooks/New folder/qwe_download.jpg&#10;/home/mepowerleo10/Documents/Sikia AudioBooks/audibooks/alice_adventures_v_1208_librivox/Alices_Adventures_in_Wonderland5_100.jpg&#10;/home/mepowerleo10/Pictures/Popular/03eb86aed81bd603401e9ef1bf681d1a.png&#10;/home/mepowerleo10/Documents/Sikia AudioBooks/New folder/assets/login_logo.svg&#10;/home/mepowerleo10/Documents/Sikia AudioBooks/New folder/assets/splash_logo.svg&#10;/home/mepowerleo10/Documents/Sikia AudioBooks/New folder/assets/icon.svg&#10;/home/mepowerleo10/Downloads/lollipop.svg&#10;/usr/share/java/gradle" />
    <property name="file.gist.reindex.count" value="117" />
    <property name="fileTypeChangedCounter" value="1" />
    <property name="installed.kotlin.plugin.version" value="1.3.72-release-Studio4.1-5" />
    <property name="io.flutter.analytics.toastShown" value="true" />
    <property name="io.flutter.console.preferencesSet" value="true" />
    <property name="kotlin-gradle-user-dirs" value="$USER_HOME$/.gradle" />
    <property name="kotlin.lastUpdateCheck" value="1588548974264" />
    <property name="kotlin.plugin.releaseDate" value="1.3.72-release-Studio4.1-5:2020-06-17" />
    <property name="last.imported.location" value="$USER_HOME$/AndroidStudioProjects/SikiaAudioBooks" />
    <property name="last.used.gradle.home" value="/usr/share/java/gradle" />
    <property name="lastSeenTip" value="Kotlin_mix.html" />
    <property name="lastTimeTipsWereShown" value="1604401427516" />
    <property name="lastTip" value="38" />
    <property name="last_opened_file_path" value="$APPLICATION_CONFIG_DIR$" />
    <property name="newly.installed.api.level" value="28" />
    <property name="seenTips" value="Kotlin_mix.html" />
    <property name="tasks.pass.word.conversion.enforced" value="true" />
  </component>
</application>